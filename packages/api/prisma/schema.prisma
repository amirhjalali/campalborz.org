// Minimal working schema for Camp Alborz platform
// This includes only core models needed to get started

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Core multi-tenant model
model Tenant {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  subdomain       String   @unique
  customDomain    String?  @unique
  logo            String?
  settings        Json     @default("{}")
  isActive        Boolean  @default(true)
  
  // Subscription & Billing
  plan            TenantPlan @default(free)
  stripeCustomerId     String?
  subscriptionId       String?
  subscriptionStatus   String?
  trialEndsAt         DateTime?
  
  // Branding
  primaryColor    String   @default("#C75D00")
  secondaryColor  String   @default("#8B4513")
  accentColor     String   @default("#D4A574")
  fontFamily      String   @default("Playfair Display")
  
  // Feature flags & limits
  features        Json     @default("{}")
  limits          Json     @default("{}")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  users           User[]
  organizations   Organization[]
  campaigns       Campaign[]
  events          Event[]
  donations       Donation[]
  theme           Theme?
  admins          TenantAdmin[]

  @@map("tenants")
}

model User {
  id          String     @id @default(cuid())
  tenantId    String
  email       String
  password    String
  firstName   String?
  lastName    String?
  avatar      String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  tenant      Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  adminRoles  TenantAdmin[]
  
  createdCampaigns  Campaign[] @relation("CampaignCreator")
  createdEvents     Event[]    @relation("EventCreator")
  donations         Donation[]

  @@unique([tenantId, email])
  @@map("users")
}

model Organization {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  description String?
  type        String?
  website     String?
  logo        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  campaigns   Campaign[]
  events      Event[]

  @@map("organizations")
}

model Campaign {
  id              String   @id @default(cuid())
  tenantId        String
  organizationId  String
  title           String
  description     String
  goalAmount      Float
  currentAmount   Float    @default(0)
  startDate       DateTime
  endDate         DateTime
  imageUrl        String?
  isActive        Boolean  @default(true)
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant          Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  organization    Organization @relation(fields: [organizationId], references: [id])
  creator         User         @relation("CampaignCreator", fields: [createdBy], references: [id])
  donations       Donation[]

  @@map("campaigns")
}

model Event {
  id              String   @id @default(cuid())
  tenantId        String
  organizationId  String
  name            String
  description     String?
  location        String?
  startDate       DateTime
  endDate         DateTime
  capacity        Int?
  imageUrl        String?
  isPublic        Boolean  @default(true)
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant          Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  organization    Organization @relation(fields: [organizationId], references: [id])
  creator         User         @relation("EventCreator", fields: [createdBy], references: [id])

  @@map("events")
}

model Donation {
  id              String   @id @default(cuid())
  tenantId        String
  campaignId      String
  donorId         String
  amount          Float
  currency        String   @default("USD")
  paymentMethod   String?
  transactionId   String?
  status          DonationStatus @default(pending)
  isAnonymous     Boolean  @default(false)
  message         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  campaign        Campaign @relation(fields: [campaignId], references: [id])
  donor           User     @relation(fields: [donorId], references: [id])

  @@map("donations")
}

// Theme configuration for tenant branding
model Theme {
  id              String   @id @default(cuid())
  tenantId        String   @unique
  
  // Color scheme
  colors          Json     // {"primary": "#...", "secondary": "#...", etc}
  
  // Typography
  fonts           Json     // {"heading": "...", "body": "..."}
  
  // Layout preferences
  layout          Json     // {"navigation": "top|side", "footer": true|false}
  
  // Custom CSS
  customCss       String?  @db.Text
  
  // Assets
  heroImage       String?
  backgroundImage String?
  favicon         String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@map("themes")
}

// Tenant administrators with role-based permissions
model TenantAdmin {
  id          String    @id @default(cuid())
  tenantId    String
  userId      String
  role        AdminRole @default(admin)
  permissions Json      @default("[]") // Array of specific permissions
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, userId])
  @@map("tenant_admins")
}

// Enums
enum DonationStatus {
  pending
  processing
  completed
  failed
  refunded
  cancelled
}

enum TenantPlan {
  free        // 50 members, basic features
  starter     // 200 members, $49/month
  growth      // 1000 members, $149/month
  enterprise  // Unlimited, custom pricing
}

enum AdminRole {
  owner       // Full control, billing access
  admin       // Manage users and content
  moderator   // Moderate content
  viewer      // Read-only access
}