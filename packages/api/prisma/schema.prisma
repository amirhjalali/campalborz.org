// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  subdomain String   @unique
  domain    String?  @unique
  status    TenantStatus @default(ACTIVE)
  plan      TenantPlan   @default(STARTER)
  settings  Json
  defaultLanguage String           @default("en")
  supportedLanguages String[]      @default(["en"])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users         User[]
  organizations Organization[]
  pages         Page[]
  templates     Template[]
  media         Media[]
  contentBlocks ContentBlock[]
  events        Event[]
  eventRSVPs    EventRSVP[]
  payments      Payment[]
  donations     Donation[]
  subscriptions Subscription[]
  notifications Notification[]
  apiKeys       ApiKey[]
  backups       Backup[]
  integrations  Integration[]
  webhookEvents WebhookEvent[]
  auditLogs     AuditLog[]
  
  // CMS relationships
  contentTypes    ContentType[]
  contents        Content[]
  categories      Category[]
  tags            Tag[]
  contentTemplates ContentTemplate[]
  
  // Event management relationships
  eventTicketTypes EventTicketType[]
  eventTickets    EventTicket[]
  eventSessions   EventSession[]
  eventSponsors   EventSponsor[]
  eventWaitlists  EventWaitlist[]
  eventReminders  EventReminder[]
  eventFeedback   EventFeedback[]
  
  // Member portal relationships
  memberApplications MemberApplication[]
  memberPoints    MemberPoints[]
  volunteerLogs   VolunteerLog[]
  memberBadges    MemberBadge[]
  
  // Internationalization relationships
  tenantLanguages TenantLanguage[]
  translationKeys TranslationKey[]
  contentTranslations ContentTranslation[]
  
  // Communication Hub relationships
  communicationChannels CommunicationChannel[]
  channelMembers ChannelMember[]
  messages Message[]
  messageThreads MessageThread[]
  messageReactions MessageReaction[]
  messageMentions MessageMention[]
  channelInvitations ChannelInvitation[]
  directMessages DirectMessage[]
  dmReactions DMReaction[]
  announcements Announcement[]
  announcementRecipients AnnouncementRecipient[]
  forums Forum[]
  forumCategories ForumCategory[]
  forumTopics ForumTopic[]
  forumPosts ForumPost[]
  forumModerators ForumModerator[]
  
  // Advanced Search relationships
  searchIndices SearchIndex[]
  searchQueries SearchQuery[]
  searchSuggestions SearchSuggestion[]
  savedSearches SavedSearch[]
  searchFacets SearchFacet[]
  searchResults SearchResult[]
  
  // Push Notification relationships
  pushDevices PushDevice[]
  pushNotifications PushNotification[]
  notificationTemplates NotificationTemplate[]
  notificationPreferences NotificationPreference[]
  notificationCampaigns NotificationCampaign[]
  notificationAnalytics NotificationAnalytics[]
  
  // Data Export/Import relationships
  dataExports DataExport[]
  dataImports DataImport[]
  dataTemplates DataTemplate[]
  dataSyncs DataSync[]
  dataBackups DataBackup[]
  
  // AI/ML Features relationships
  aiModels AIModel[]
  aiPredictions AIPrediction[]
  aiInsights AIInsight[]
  recommendationEngines RecommendationEngine[]
  chatSessions ChatSession[]
  contentAnalyses ContentAnalysis[]
  automationRules AutomationRule[]
  
  // Advanced Analytics relationships
  analyticsDashboards AnalyticsDashboard[]
  analyticsMetrics AnalyticsMetric[]
  analyticsQueries AnalyticsQuery[]
  analyticsAlerts AnalyticsAlert[]
  dataCubes DataCube[]
  cohortAnalyses CohortAnalysis[]
  funnelAnalyses FunnelAnalysis[]
  retentionAnalyses RetentionAnalysis[]
  segmentAnalyses SegmentAnalysis[]
  
  // Performance Monitoring relationships
  performanceMetrics PerformanceMetric[]
  performanceTraces PerformanceTrace[]
  performanceAlerts PerformanceAlert[]
  performanceAlertTriggers PerformanceAlertTrigger[]
  systemHealthChecks SystemHealthCheck[]
  performanceProfiles PerformanceProfile[]
  resourceUsages ResourceUsage[]
  performanceBenchmarks PerformanceBenchmark[]
  
  @@map("tenants")
}

model User {
  id          String     @id @default(cuid())
  tenantId    String
  email       String
  name        String
  avatar      String?
  role        UserRole   @default(MEMBER)
  status      UserStatus @default(PENDING)
  permissions String[]
  passwordHash String
  emailVerified Boolean @default(false)
  emailVerificationToken String?
  emailVerificationExpiry DateTime?
  emailVerifiedAt DateTime?
  passwordResetToken String?
  passwordResetExpiry DateTime?
  passwordChangedAt DateTime?
  lastLoginAt DateTime?
  lastLoginIp String?
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret String?
  twoFactorBackupCodes Json?
  inviteAcceptedAt DateTime?
  metadata    Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  authoredPages Page[] @relation("PageAuthor")
  editedPages   Page[] @relation("PageEditor")
  uploadedMedia Media[]
  createdEvents Event[] @relation("EventCreator")
  eventRSVPs    EventRSVP[]
  payments      Payment[]
  donations     Donation[]
  subscriptions Subscription[]
  sentNotifications Notification[] @relation("NotificationSender")
  receivedNotifications Notification[] @relation("NotificationRecipient")
  createdApiKeys        ApiKey[] @relation("ApiKeyCreator")
  createdBackups        Backup[] @relation("BackupCreator")
  createdIntegrations   Integration[] @relation("IntegrationCreator")
  auditLogs             AuditLog[]
  
  // CMS relationships
  contentTypes    ContentType[] @relation("ContentTypeCreator")
  authoredContent Content[] @relation("ContentAuthor")
  editedContent   Content[] @relation("ContentEditor")
  revisions       ContentRevision[] @relation("RevisionAuthor")
  translations    ContentTranslation[] @relation("ContentTranslator")
  uploadedMedia   ContentMedia[] @relation("MediaUploader")
  comments        Comment[] @relation("CommentAuthor")
  moderatedComments Comment[] @relation("CommentModerator")
  contentTemplates ContentTemplate[] @relation("TemplateCreator")
  
  // Event management relationships
  eventTickets    EventTicket[] @relation("UserTickets")
  checkedInTickets EventTicket[] @relation("TicketCheckedInBy")
  sessionAttendees SessionAttendee[] @relation("SessionAttendee")
  eventWaitlists  EventWaitlist[] @relation("EventWaitlist")
  eventReminders  EventReminder[] @relation("EventReminders")
  eventFeedback   EventFeedback[] @relation("EventFeedback")
  
  // Member portal relationships
  memberApplications MemberApplication[]
  reviewedApplications MemberApplication[] @relation("ApplicationReviewer")
  memberPoints    MemberPoints[]
  volunteerLogs   VolunteerLog[]
  badges          UserBadge[]
  
  // Performance Monitoring relationships
  createdPerformanceAlerts PerformanceAlert[]
  createdPerformanceProfiles PerformanceProfile[]
  createdPerformanceBenchmarks PerformanceBenchmark[]
  
  // Advanced Analytics relationships
  createdAnalyticsDashboards AnalyticsDashboard[]
  createdAnalyticsMetrics AnalyticsMetric[]
  createdAnalyticsQueries AnalyticsQuery[]
  createdAnalyticsAlerts AnalyticsAlert[]
  createdCohortAnalyses CohortAnalysis[]
  createdFunnelAnalyses FunnelAnalysis[]
  createdRetentionAnalyses RetentionAnalysis[]
  createdSegmentAnalyses SegmentAnalysis[]
  
  // AI/ML Features relationships
  createdAIModels AIModel[]
  createdRecommendationEngines RecommendationEngine[]
  createdChatSessions ChatSession[]
  createdAutomationRules AutomationRule[]
  
  // Data Export/Import relationships
  createdDataExports DataExport[]
  createdDataImports DataImport[]
  createdDataTemplates DataTemplate[]
  createdDataSyncs DataSync[]
  createdDataBackups DataBackup[]
  
  // Push Notification relationships
  createdNotificationTemplates NotificationTemplate[]
  createdNotificationCampaigns NotificationCampaign[]
  pushDevices PushDevice[]
  notificationPreferences NotificationPreference[]
  
  // Advanced Search relationships
  createdSearchIndices SearchIndex[]
  savedSearches SavedSearch[]
  
  // Communication Hub relationships
  createdChannels CommunicationChannel[] @relation("ChannelCreator")
  channelMemberships ChannelMember[] @relation("ChannelMembers")
  authoredMessages Message[] @relation("MessageAuthor")
  pinnedMessages Message[] @relation("MessagePinner")
  createdThreads MessageThread[] @relation("ThreadCreator")
  lockedThreads MessageThread[] @relation("ThreadLocker")
  messageReactions MessageReaction[]
  messageMentions MessageMention[]
  sentChannelInvitations ChannelInvitation[] @relation("InvitationSender")
  receivedChannelInvitations ChannelInvitation[] @relation("InvitationRecipient")
  sentDirectMessages DirectMessage[] @relation("DMSender")
  receivedDirectMessages DirectMessage[] @relation("DMRecipient")
  dmReactions DMReaction[]
  createdAnnouncements Announcement[]
  announcementRecipients AnnouncementRecipient[]
  createdForums Forum[]
  forumModerators ForumModerator[]
  createdForumTopics ForumTopic[]
  authoredForumPosts ForumPost[]
  
  // Internationalization relationships
  translations Translation[] @relation("Translator")
  reviewedTranslations Translation[] @relation("Reviewer")
  contentTranslations ContentTranslation[] @relation("ContentTranslator")
  reviewedContentTranslations ContentTranslation[] @relation("ContentReviewer")
  
  @@unique([tenantId, email])
  @@map("users")
}

model Organization {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  type        OrgType  @default(CAMP)
  description String?
  logo        String?
  website     String?
  location    String?
  settings    Json
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  pages       Page[]
  
  @@map("organizations")
}

model Page {
  id             String      @id @default(cuid())
  tenantId       String
  organizationId String?
  title          String
  slug           String
  content        Json        // Structured content blocks
  metaTitle      String?
  metaDescription String?
  status         PageStatus  @default(DRAFT)
  publishedAt    DateTime?
  templateId     String?
  settings       Json?       // Page-specific settings
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  createdBy      String
  updatedBy      String

  // Relations
  tenant         Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  author         User         @relation("PageAuthor", fields: [createdBy], references: [id])
  editor         User         @relation("PageEditor", fields: [updatedBy], references: [id])
  template       Template?    @relation(fields: [templateId], references: [id])
  
  @@unique([tenantId, slug])
  @@map("pages")
}

model Template {
  id          String   @id @default(cuid())
  tenantId    String?  // null for global templates
  name        String
  description String?
  preview     String?  // URL to preview image
  content     Json     // Template structure
  category    String
  isPublic    Boolean  @default(false)
  price       Int?     // in cents, null for free
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant      Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  pages       Page[]
  
  @@map("templates")
}

model Media {
  id          String    @id @default(cuid())
  tenantId    String
  filename    String
  originalName String
  mimeType    String
  size        Int       // in bytes
  url         String
  thumbnailUrl String?
  alt         String?
  caption     String?
  folder      String?   // organizational folder
  tags        String[]  // searchable tags
  metadata    Json?     // EXIF data, dimensions, etc.
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  uploadedBy  String

  // Relations
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  uploader    User   @relation(fields: [uploadedBy], references: [id])
  
  @@map("media")
}

model ContentBlock {
  id          String         @id @default(cuid())
  tenantId    String
  name        String
  description String?
  type        ContentBlockType
  schema      Json           // JSON schema for the block
  component   String         // React component name
  category    String
  icon        String?
  isPublic    Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@map("content_blocks")
}

model Event {
  id           String      @id @default(cuid())
  tenantId     String
  title        String
  description  String?
  content      Json?       // Rich content for event details
  type         EventType   @default(GENERAL)
  category     String?     // Workshop, Social, Art Build, etc.
  startDate    DateTime
  endDate      DateTime?
  location     String?
  address      String?
  maxAttendees Int?
  price        Int?        // in cents, null for free
  isPublic     Boolean     @default(true)
  status       EventStatus @default(DRAFT)
  metadata     Json?       // Additional event data
  settings     Json?       // Event-specific settings
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  createdBy    String

  // Relations
  tenant       Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator      User        @relation("EventCreator", fields: [createdBy], references: [id])
  rsvps        EventRSVP[]
  payments     Payment[]
  ticketTypes  EventTicketType[]
  sessions     EventSession[]
  sponsors     EventSponsor[]
  waitlists    EventWaitlist[]
  reminders    EventReminder[]
  feedback     EventFeedback[]
  volunteerLogs VolunteerLog[]
  
  @@index([tenantId, startDate])
  @@index([tenantId, status])
  @@index([type, startDate])
  @@map("events")
}

model EventTicketType {
  id            String   @id @default(cuid())
  eventId       String
  tenantId      String
  name          String
  description   String?
  price         Int      // in cents
  quantity      Int      // Total tickets available
  sold          Int      @default(0)
  maxPerPerson  Int      @default(1)
  saleStartDate DateTime?
  saleEndDate   DateTime?
  isActive      Boolean  @default(true)
  metadata      Json?    // Additional ticket data
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  event         Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tenant        Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tickets       EventTicket[]

  @@index([eventId, isActive])
  @@map("event_ticket_types")
}

model EventTicket {
  id            String   @id @default(cuid())
  ticketTypeId  String
  userId        String
  tenantId      String
  ticketNumber  String   @unique // Generated ticket number
  status        TicketStatus @default(VALID)
  purchasePrice Int      // Price paid in cents
  qrCode        String?  // QR code for check-in
  checkedInAt   DateTime?
  checkedInBy   String?
  metadata      Json?    // Additional ticket data
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  ticketType    EventTicketType @relation(fields: [ticketTypeId], references: [id], onDelete: Cascade)
  user          User            @relation("UserTickets", fields: [userId], references: [id])
  tenant        Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  checkedInByUser User?         @relation("TicketCheckedInBy", fields: [checkedInBy], references: [id])

  @@index([userId, status])
  @@index([ticketTypeId, status])
  @@map("event_tickets")
}

model EventSession {
  id          String   @id @default(cuid())
  eventId     String
  tenantId    String
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  maxAttendees Int?
  speakers    Json?    // Array of speaker information
  materials   Json?    // Required materials or preparation
  level       SessionLevel @default(BEGINNER)
  tags        String[]
  isRequired  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  event       Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tenant      Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  attendees   SessionAttendee[]

  @@index([eventId, startTime])
  @@map("event_sessions")
}

model SessionAttendee {
  id        String      @id @default(cuid())
  sessionId String
  userId    String
  status    AttendeeStatus @default(REGISTERED)
  notes     String?
  rating    Int?        // 1-5 rating after session
  feedback  String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  session   EventSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      User         @relation("SessionAttendee", fields: [userId], references: [id])

  @@unique([sessionId, userId])
  @@map("session_attendees")
}

model EventSponsor {
  id          String       @id @default(cuid())
  eventId     String
  tenantId    String
  name        String
  logo        String?
  website     String?
  description String?
  level       SponsorLevel @default(BRONZE)
  amount      Int?         // Sponsorship amount in cents
  benefits    Json?        // Array of sponsor benefits
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  event       Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([eventId, level])
  @@map("event_sponsors")
}

model EventWaitlist {
  id          String   @id @default(cuid())
  eventId     String
  userId      String
  tenantId    String
  position    Int      // Position in waitlist
  notified    Boolean  @default(false)
  expiresAt   DateTime?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user        User     @relation("EventWaitlist", fields: [userId], references: [id])
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([eventId, position])
  @@map("event_waitlists")
}

model EventReminder {
  id        String    @id @default(cuid())
  eventId   String
  userId    String
  tenantId  String
  type      ReminderType
  sendAt    DateTime
  sent      Boolean   @default(false)
  sentAt    DateTime?
  method    NotificationChannel @default(EMAIL)
  metadata  Json?
  createdAt DateTime  @default(now())

  // Relations
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User      @relation("EventReminders", fields: [userId], references: [id])
  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([sendAt, sent])
  @@index([eventId, type])
  @@map("event_reminders")
}

model EventFeedback {
  id          String   @id @default(cuid())
  eventId     String
  userId      String
  tenantId    String
  rating      Int      // 1-5 overall rating
  feedback    String?
  categories  Json?    // Ratings for different aspects
  wouldRecommend Boolean?
  suggestions String?
  isAnonymous Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user        User     @relation("EventFeedback", fields: [userId], references: [id])
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([eventId, rating])
  @@map("event_feedback")
}

// Event-related Enums
enum TicketStatus {
  VALID
  USED
  CANCELLED
  REFUNDED
  TRANSFERRED
}

enum SessionLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  ALL_LEVELS
}

enum AttendeeStatus {
  REGISTERED
  CONFIRMED
  ATTENDED
  NO_SHOW
  CANCELLED
}

enum SponsorLevel {
  TITLE
  PLATINUM
  GOLD
  SILVER
  BRONZE
  SUPPORTER
}

enum ReminderType {
  EVENT_REMINDER
  RSVP_REMINDER
  FEEDBACK_REQUEST
  FOLLOW_UP
  CUSTOM
}

model EventRSVP {
  id         String     @id @default(cuid())
  tenantId   String
  eventId    String
  userId     String
  status     RSVPStatus @default(PENDING)
  response   String?    // Additional response/notes
  attendees  Int        @default(1) // Number of people this RSVP covers
  metadata   Json?      // Additional RSVP data
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  tenant     Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  event      Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([eventId, userId])
  @@map("event_rsvps")
}

model Payment {
  id              String        @id @default(cuid())
  tenantId        String
  userId          String
  amount          Int           // in cents
  currency        String        @default("USD")
  type            PaymentType
  status          PaymentStatus @default(PENDING)
  stripePaymentId String?       @unique
  stripeCustomerId String?
  metadata        Json?         // Additional payment data
  description     String?
  eventId         String?       // If payment is for event
  donationId      String?      // If payment is a donation
  subscriptionId  String?       // If payment is for subscription
  refundedAmount  Int?          // Amount refunded in cents
  failureReason   String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  tenant          Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  event           Event?        @relation(fields: [eventId], references: [id], onDelete: SetNull)
  donation        Donation?     @relation(fields: [donationId], references: [id], onDelete: SetNull)
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  
  @@map("payments")
}

model Donation {
  id              String         @id @default(cuid())
  tenantId        String
  userId          String?        // null for anonymous donations
  amount          Int            // in cents
  currency        String         @default("USD")
  type            DonationType   @default(ONE_TIME)
  status          DonationStatus @default(PENDING)
  campaign        String?        // Campaign or fund name
  message         String?        // Donor message
  isAnonymous     Boolean        @default(false)
  metadata        Json?          // Additional donation data
  taxReceiptSent  Boolean        @default(false)
  acknowledgeSent Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  tenant          Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user            User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  payment         Payment[]
  
  @@map("donations")
}

model Subscription {
  id                 String             @id @default(cuid())
  tenantId           String
  userId             String
  plan               String             // Plan identifier
  amount             Int                // in cents per billing period
  currency           String             @default("USD")
  interval           BillingInterval    @default(MONTHLY)
  status             SubscriptionStatus @default(ACTIVE)
  stripeSubscriptionId String?          @unique
  stripeCustomerId   String?
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelledAt        DateTime?
  cancelReason       String?
  metadata           Json?              // Additional subscription data
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  // Relations
  tenant             Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments           Payment[]
  
  @@map("subscriptions")
}

model Notification {
  id          String             @id @default(cuid())
  tenantId    String
  senderId    String?            // null for system notifications
  recipientId String
  type        NotificationType
  title       String
  message     String
  data        Json?              // Additional notification data
  isRead      Boolean            @default(false)
  readAt      DateTime?
  channel     NotificationChannel @default(IN_APP)
  priority    NotificationPriority @default(NORMAL)
  expiresAt   DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relations
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  sender      User?  @relation("NotificationSender", fields: [senderId], references: [id], onDelete: SetNull)
  recipient   User   @relation("NotificationRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  
  @@index([recipientId, isRead])
  @@index([tenantId, createdAt])
  @@map("notifications")
}

enum TenantStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum TenantPlan {
  STARTER
  PROFESSIONAL
  ENTERPRISE
  CUSTOM
}

enum UserRole {
  SUPER_ADMIN
  TENANT_ADMIN
  ADMIN
  MODERATOR
  MEMBER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum OrgType {
  CAMP
  FESTIVAL
  COLLECTIVE
  COMMUNITY
  OTHER
}

enum PageStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ContentBlockType {
  TEXT
  IMAGE
  VIDEO
  GALLERY
  FORM
  BUTTON
  HERO
  TESTIMONIAL
  FAQ
  PRICING
  TEAM
  CALENDAR
  MAP
  CUSTOM
}

enum EventType {
  GENERAL
  WORKSHOP
  SOCIAL
  ART_BUILD
  FUNDRAISER
  CULTURAL
  MEETING
  VOLUNTEER
  EDUCATIONAL
  ENTERTAINMENT
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  POSTPONED
  COMPLETED
}

enum RSVPStatus {
  PENDING
  CONFIRMED
  DECLINED
  WAITLIST
  CANCELLED
}

enum PaymentType {
  DONATION
  EVENT_TICKET
  SUBSCRIPTION
  MERCHANDISE
  OTHER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
  CANCELLED
}

enum DonationType {
  ONE_TIME
  RECURRING
  CAMPAIGN
}

enum DonationStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum BillingInterval {
  MONTHLY
  QUARTERLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELLED
  PAUSED
  TRIALING
  INCOMPLETE
}

enum NotificationType {
  MEMBER_APPLICATION
  MEMBER_APPROVED
  MEMBER_REJECTED
  EVENT_CREATED
  EVENT_UPDATED
  EVENT_CANCELLED
  EVENT_RSVP
  DONATION_RECEIVED
  PAYMENT_FAILED
  SYSTEM_ANNOUNCEMENT
  REMINDER
  WELCOME
  ADMIN_MESSAGE
}

enum NotificationChannel {
  IN_APP
  EMAIL
  SMS
  PUSH
}

enum BackupType {
  DATABASE
  FILES
  FULL
}

enum BackupStorageType {
  LOCAL
  S3
  AZURE
  GCP
}

enum BackupStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  EXPIRED
}

enum IntegrationCategory {
  EMAIL
  PAYMENT
  ANALYTICS
  SOCIAL
  STORAGE
  COMMUNICATION
  OTHER
}

enum AuditSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model ApiKey {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  description String?
  keyHash     String   @unique // SHA256 hash of the actual key
  permissions String[] // Array of permission strings
  rateLimit   Int      @default(1000) // Requests per hour
  isActive    Boolean  @default(true)
  lastUsedAt  DateTime?
  usageCount  Int      @default(0)
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   // User ID who created this key

  // Relations
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User   @relation("ApiKeyCreator", fields: [createdBy], references: [id])

  @@map("api_keys")
}

model Backup {
  id          String       @id @default(cuid())
  tenantId    String
  type        BackupType
  size        BigInt
  compressed  Boolean      @default(false)
  encrypted   Boolean      @default(false)
  checksum    String
  storagePath String
  storageType BackupStorageType @default(LOCAL)
  status      BackupStatus @default(PENDING)
  error       String?
  metadata    Json?
  expiresAt   DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdBy   String

  // Relations
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User   @relation("BackupCreator", fields: [createdBy], references: [id])

  @@map("backups")
}

model Integration {
  id          String             @id @default(cuid())
  tenantId    String
  name        String
  description String?
  category    IntegrationCategory
  provider    String
  enabled     Boolean            @default(true)
  settings    Json               @default("{}")
  credentials Json               // Encrypted credentials
  webhookUrl  String?
  webhookSecret String?
  rateLimits  Json?
  scopes      String[]
  version     String             @default("1.0.0")
  lastSyncAt  DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  createdBy   String

  // Relations
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator       User           @relation("IntegrationCreator", fields: [createdBy], references: [id])
  webhookEvents WebhookEvent[]

  @@map("integrations")
}

model WebhookEvent {
  id            String      @id @default(cuid())
  tenantId      String
  integrationId String
  event         String
  payload       Json
  headers       Json
  signature     String?
  verified      Boolean     @default(false)
  processed     Boolean     @default(false)
  error         String?
  retryCount    Int         @default(0)
  maxRetries    Int         @default(3)
  nextRetryAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@map("webhook_events")
}

model AuditLog {
  id         String         @id @default(cuid())
  tenantId   String?
  userId     String?
  action     String
  resource   String
  resourceId String?
  ip         String
  userAgent  String
  metadata   Json           @default("{}")
  severity   AuditSeverity
  timestamp  DateTime       @default(now())

  // Relations
  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([tenantId, timestamp])
  @@index([userId, timestamp])
  @@index([action, timestamp])
  @@index([severity, timestamp])
  @@map("audit_logs")
}

// Advanced CMS Models

model ContentType {
  id          String   @id @default(cuid())
  name        String   // e.g., "Page", "Blog Post", "Event"
  slug        String   // e.g., "page", "blog_post", "event"
  description String?
  
  // Schema definition for this content type
  schema      Json     // JSON schema defining fields and validation
  
  // Display configuration
  displayName String   // Singular name for UI
  pluralName  String   // Plural name for UI
  icon        String?  // Icon identifier
  
  // Permissions and workflow
  permissions Json     // Role-based permissions
  workflow    Json?    // Approval workflow configuration
  
  // Settings
  isEnabled   Boolean  @default(true)
  isPublic    Boolean  @default(false) // Can be viewed by non-members
  allowComments Boolean @default(false)
  
  // Relationships
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  contents    Content[]
  categories  Category[]
  templates   ContentTemplate[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  creator     User     @relation("ContentTypeCreator", fields: [createdBy], references: [id])
  
  @@unique([tenantId, slug])
  @@index([tenantId, isEnabled])
  @@map("content_types")
}

model Content {
  id            String   @id @default(cuid())
  title         String
  slug          String
  excerpt       String?
  
  // Content data stored as JSON based on ContentType schema
  data          Json
  
  // Meta information
  metaTitle     String?
  metaDescription String?
  metaKeywords  String?
  
  // Publishing
  status        ContentStatus @default(DRAFT)
  publishedAt   DateTime?
  scheduledAt   DateTime?
  
  // SEO and Social
  featuredImage String?
  socialImage   String?
  canonicalUrl  String?
  
  // Analytics and engagement
  viewCount     Int      @default(0)
  shareCount    Int      @default(0)
  likeCount     Int      @default(0)
  commentCount  Int      @default(0)
  
  // Content type relationship
  contentTypeId String
  contentType   ContentType @relation(fields: [contentTypeId], references: [id], onDelete: Cascade)
  
  // Tenant relationship
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Categories and tags
  categories    ContentCategory[]
  tags          ContentTag[]
  
  // Media attachments
  media         ContentMedia[]
  
  // Comments
  comments      Comment[]
  
  // Revisions
  revisions     ContentRevision[]
  
  // Translations
  translations  ContentTranslation[]
  
  // Author information
  authorId      String
  author        User     @relation("ContentAuthor", fields: [authorId], references: [id])
  
  // Editor information
  lastEditedBy  String?
  lastEditor    User?    @relation("ContentEditor", fields: [lastEditedBy], references: [id])
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([tenantId, contentTypeId, slug])
  @@index([tenantId, status, publishedAt])
  @@index([tenantId, contentTypeId, status])
  @@index([publishedAt])
  @@map("cms_content")
}

model ContentRevision {
  id        String   @id @default(cuid())
  
  // Revision data
  title     String
  data      Json
  excerpt   String?
  
  // Revision metadata
  version   Int
  comment   String?
  
  // Relationships
  contentId String
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  authorId  String
  author    User     @relation("RevisionAuthor", fields: [authorId], references: [id])
  
  createdAt DateTime @default(now())
  
  @@index([contentId, version])
  @@map("content_revisions")
}

model ContentTranslation {
  id          String   @id @default(cuid())
  
  language    String   // ISO language code (e.g., "en", "fa", "es")
  title       String
  excerpt     String?
  data        Json
  
  // Meta for this language
  metaTitle     String?
  metaDescription String?
  
  // Translation status
  status      TranslationStatus @default(PENDING)
  
  // Relationships
  contentId   String
  content     Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  translatorId String?
  translator   User?    @relation("ContentTranslator", fields: [translatorId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([contentId, language])
  @@index([language, status])
  @@map("content_translations")
}

model Category {
  id            String   @id @default(cuid())
  name          String
  slug          String
  description   String?
  color         String?  // Hex color code
  icon          String?
  
  // Hierarchy
  parentId      String?
  parent        Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children      Category[] @relation("CategoryHierarchy")
  
  // Display order
  sortOrder     Int      @default(0)
  
  // Content type relationship
  contentTypeId String
  contentType   ContentType @relation(fields: [contentTypeId], references: [id], onDelete: Cascade)
  
  // Tenant relationship
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Content relationships
  contents      ContentCategory[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([tenantId, contentTypeId, slug])
  @@index([tenantId, contentTypeId])
  @@map("cms_categories")
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  slug      String
  color     String?  // Hex color code
  
  // Tenant relationship
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Content relationships
  contents  ContentTag[]
  
  createdAt DateTime @default(now())
  
  @@unique([tenantId, slug])
  @@index([tenantId])
  @@map("cms_tags")
}

model ContentCategory {
  contentId   String
  content     Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@id([contentId, categoryId])
  @@map("content_categories")
}

model ContentTag {
  contentId   String
  content     Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  tagId       String
  tag         Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([contentId, tagId])
  @@map("content_tags")
}

model ContentMedia {
  id        String   @id @default(cuid())
  
  filename  String
  originalName String
  mimeType  String
  size      Int
  url       String
  
  // Image specific
  width     Int?
  height    Int?
  alt       String?
  caption   String?
  
  // Relationships
  contentId String
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  uploadedBy String
  uploader   User     @relation("MediaUploader", fields: [uploadedBy], references: [id])
  
  createdAt DateTime @default(now())
  
  @@index([contentId])
  @@map("content_media")
}

model Comment {
  id        String   @id @default(cuid())
  
  content   String
  status    CommentStatus @default(PENDING)
  
  // Hierarchy for replies
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  
  // Relationships
  contentId String
  contentItem Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  authorId  String?
  author    User?    @relation("CommentAuthor", fields: [authorId], references: [id])
  
  // For guest comments
  guestName  String?
  guestEmail String?
  
  // Moderation
  moderatedBy String?
  moderator   User?    @relation("CommentModerator", fields: [moderatedBy], references: [id])
  moderatedAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([contentId, status])
  @@index([createdAt])
  @@map("cms_comments")
}

model ContentTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  
  // Template data
  schema      Json     // Field definitions
  defaultData Json?    // Default values
  
  // Template metadata
  category    String?
  tags        String[]
  
  // Usage tracking
  useCount    Int      @default(0)
  
  // Relationships
  contentTypeId String
  contentType   ContentType @relation(fields: [contentTypeId], references: [id], onDelete: Cascade)
  
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  createdBy   String
  creator     User     @relation("TemplateCreator", fields: [createdBy], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([tenantId, contentTypeId])
  @@map("content_templates")
}

// Member Portal Models
model MemberApplication {
  id          String   @id @default(cuid())
  userId      String
  tenantId    String
  answers     Json     // Application form answers
  references  Json?    // Reference contacts
  status      ApplicationStatus @default(PENDING)
  reviewedBy  String?
  reviewNotes String?
  submittedAt DateTime @default(now())
  reviewedAt  DateTime?
  
  // Relations
  user        User     @relation(fields: [userId], references: [id])
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  reviewer    User?    @relation("ApplicationReviewer", fields: [reviewedBy], references: [id])
  
  @@index([tenantId, status])
  @@index([userId])
  @@map("member_applications")
}

model MemberPoints {
  id        String   @id @default(cuid())
  userId    String
  tenantId  String
  points    Int
  reason    String
  category  PointCategory
  metadata  Json?
  awardedAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@index([userId, awardedAt])
  @@index([tenantId, category])
  @@map("member_points")
}

model VolunteerLog {
  id          String   @id @default(cuid())
  userId      String
  tenantId    String
  eventId     String?
  taskName    String
  description String?
  hours       Float
  date        DateTime
  verified    Boolean  @default(false)
  verifiedBy  String?
  notes       String?
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id])
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  event       Event?   @relation(fields: [eventId], references: [id])
  
  @@index([userId, date])
  @@index([tenantId, verified])
  @@map("volunteer_logs")
}

model MemberBadge {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  description String
  icon        String   // Icon URL or identifier
  criteria    Json     // Criteria for earning badge
  points      Int      @default(0) // Points awarded with badge
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  // Relations
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users       UserBadge[]
  
  @@unique([tenantId, name])
  @@map("member_badges")
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  earnedAt  DateTime @default(now())
  
  // Relations
  user      User        @relation(fields: [userId], references: [id])
  badge     MemberBadge @relation(fields: [badgeId], references: [id])
  
  @@unique([userId, badgeId])
  @@map("user_badges")
}

// Member Portal Enums
enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  WITHDRAWN
}

enum PointCategory {
  EVENT
  VOLUNTEER
  DONATION
  PARTICIPATION
  ACHIEVEMENT
  REFERRAL
  OTHER
}

// CMS Enums
enum ContentStatus {
  DRAFT
  REVIEW
  SCHEDULED
  PUBLISHED
  ARCHIVED
  DELETED
}

enum TranslationStatus {
  PENDING
  IN_PROGRESS
  REVIEW
  COMPLETED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}

// Internationalization Models

model Language {
  id        String   @id @default(cuid())
  code      String   @unique // ISO 639-1 code (e.g., "en", "es", "fa")
  name      String   // English name (e.g., "English", "Spanish", "Persian")
  nativeName String  // Native name (e.g., "English", "Español", "فارسی")
  direction String   @default("ltr") // "ltr" or "rtl"
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  translations Translation[]
  tenantLanguages TenantLanguage[]

  @@map("languages")
}

model TenantLanguage {
  id         String   @id @default(cuid())
  tenantId   String
  languageId String
  isDefault  Boolean  @default(false)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())

  // Relations
  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  language Language @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@unique([tenantId, languageId])
  @@map("tenant_languages")
}

model TranslationKey {
  id          String   @id @default(cuid())
  tenantId    String?  // null for global keys
  namespace   String   // e.g., "common", "navigation", "events"
  key         String   // e.g., "login", "submit", "event.title"
  description String?  // Context for translators
  isPlural    Boolean  @default(false)
  metadata    Json?    // Additional context (character limits, etc.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant       Tenant?       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  translations Translation[]

  @@unique([tenantId, namespace, key])
  @@index([namespace, key])
  @@map("translation_keys")
}

model Translation {
  id              String            @id @default(cuid())
  translationKeyId String
  languageId      String
  value           String
  pluralValues    Json?             // For plural forms
  status          TranslationStatus @default(PENDING)
  translatedBy    String?
  reviewedBy      String?
  translatedAt    DateTime?
  reviewedAt      DateTime?
  version         Int               @default(1)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  translationKey TranslationKey @relation(fields: [translationKeyId], references: [id], onDelete: Cascade)
  language       Language       @relation(fields: [languageId], references: [id], onDelete: Cascade)
  translator     User?          @relation("Translator", fields: [translatedBy], references: [id], onDelete: SetNull)
  reviewer       User?          @relation("Reviewer", fields: [reviewedBy], references: [id], onDelete: SetNull)

  @@unique([translationKeyId, languageId])
  @@index([languageId, status])
  @@map("translations")
}

model ContentTranslation {
  id           String   @id @default(cuid())
  tenantId     String
  contentType  String   // "event", "page", "content", etc.
  contentId    String   // ID of the content being translated
  languageId   String
  fieldName    String   // Which field is being translated
  originalValue String  // Original value in default language
  translatedValue String // Translated value
  status       TranslationStatus @default(PENDING)
  translatedBy String?
  reviewedBy   String?
  translatedAt DateTime?
  reviewedAt   DateTime?
  version      Int      @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
  translator User?    @relation("ContentTranslator", fields: [translatedBy], references: [id], onDelete: SetNull)
  reviewer   User?    @relation("ContentReviewer", fields: [reviewedBy], references: [id], onDelete: SetNull)

  @@unique([tenantId, contentType, contentId, languageId, fieldName])
  @@index([contentType, contentId])
  @@index([languageId, status])
  @@map("content_translations")
}

// Communication Hub Models
model CommunicationChannel {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        ChannelType
  isPublic    Boolean  @default(true)
  isArchived  Boolean  @default(false)
  settings    Json     @default("{}")
  metadata    Json     @default("{}")
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenantId    String

  tenant      Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User               @relation("ChannelCreator", fields: [createdBy], references: [id])
  members     ChannelMember[]
  messages    Message[]
  threads     MessageThread[]
  invitations ChannelInvitation[]

  @@index([tenantId, type])
  @@index([tenantId, isPublic])
  @@map("communication_channels")
}

model ChannelMember {
  id           String         @id @default(cuid())
  channelId    String
  userId       String
  role         ChannelRole    @default(MEMBER)
  permissions  Json           @default("{}")
  joinedAt     DateTime       @default(now())
  lastReadAt   DateTime?
  isMuted      Boolean        @default(false)
  isOnline     Boolean        @default(false)
  lastSeenAt   DateTime?
  tenantId     String

  channel      CommunicationChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user         User                 @relation("ChannelMembers", fields: [userId], references: [id])
  tenant       Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([channelId, userId])
  @@index([tenantId, userId])
  @@map("channel_members")
}

model Message {
  id           String        @id @default(cuid())
  channelId    String
  threadId     String?
  authorId     String
  content      String
  contentType  MessageContentType   @default(TEXT)
  attachments  Json          @default("[]")
  metadata     Json          @default("{}")
  isEdited     Boolean       @default(false)
  editedAt     DateTime?
  isDeleted    Boolean       @default(false)
  deletedAt    DateTime?
  isPinned     Boolean       @default(false)
  pinnedAt     DateTime?
  pinnedBy     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  tenantId     String

  channel      CommunicationChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  thread       MessageThread?       @relation(fields: [threadId], references: [id], onDelete: Cascade)
  author       User                 @relation("MessageAuthor", fields: [authorId], references: [id])
  pinner       User?                @relation("MessagePinner", fields: [pinnedBy], references: [id])
  tenant       Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  reactions    MessageReaction[]
  mentions     MessageMention[]
  replies      Message[]            @relation("MessageReplies")
  parent       Message?             @relation("MessageReplies", fields: [threadId], references: [id])

  @@index([tenantId, channelId, createdAt])
  @@index([tenantId, authorId])
  @@index([tenantId, threadId])
  @@map("messages")
}

model MessageThread {
  id          String   @id @default(cuid())
  channelId   String
  rootMessageId String?
  title       String?
  isLocked    Boolean  @default(false)
  lockedBy    String?
  lockedAt    DateTime?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenantId    String

  channel     CommunicationChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  creator     User                 @relation("ThreadCreator", fields: [createdBy], references: [id])
  locker      User?                @relation("ThreadLocker", fields: [lockedBy], references: [id])
  tenant      Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  messages    Message[]

  @@index([tenantId, channelId])
  @@map("message_threads")
}

model MessageReaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())
  tenantId  String

  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User    @relation("MessageReactions", fields: [userId], references: [id])
  tenant    Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@index([tenantId, messageId])
  @@map("message_reactions")
}

model MessageMention {
  id          String   @id @default(cuid())
  messageId   String
  mentionedId String
  type        MentionType
  createdAt   DateTime @default(now())
  tenantId    String

  message     Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  mentioned   User    @relation("MessageMentions", fields: [mentionedId], references: [id])
  tenant      Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([messageId, mentionedId, type])
  @@index([tenantId, mentionedId])
  @@map("message_mentions")
}

model ChannelInvitation {
  id         String            @id @default(cuid())
  channelId  String
  invitedBy  String
  invitedEmail String?
  invitedUserId String?
  role       ChannelRole       @default(MEMBER)
  status     InvitationStatus  @default(PENDING)
  token      String            @unique
  expiresAt  DateTime
  respondedAt DateTime?
  createdAt  DateTime          @default(now())
  tenantId   String

  channel    CommunicationChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  inviter    User                 @relation("ChannelInviter", fields: [invitedBy], references: [id])
  invitee    User?                @relation("ChannelInvitee", fields: [invitedUserId], references: [id])
  tenant     Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, status])
  @@index([token])
  @@map("channel_invitations")
}

model DirectMessage {
  id           String        @id @default(cuid())
  senderId     String
  recipientId  String
  content      String
  contentType  MessageContentType   @default(TEXT)
  attachments  Json          @default("[]")
  isRead       Boolean       @default(false)
  readAt       DateTime?
  isEdited     Boolean       @default(false)
  editedAt     DateTime?
  isDeleted    Boolean       @default(false)
  deletedAt    DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  tenantId     String

  sender       User          @relation("DMSender", fields: [senderId], references: [id])
  recipient    User          @relation("DMRecipient", fields: [recipientId], references: [id])
  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  reactions    DMReaction[]

  @@index([tenantId, senderId, recipientId])
  @@index([tenantId, recipientId, isRead])
  @@map("direct_messages")
}

model DMReaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())
  tenantId  String

  message   DirectMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User          @relation("DMReactions", fields: [userId], references: [id])
  tenant    Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@index([tenantId, messageId])
  @@map("dm_reactions")
}

model Announcement {
  id          String           @id @default(cuid())
  title       String
  content     String
  contentType MessageContentType      @default(TEXT)
  priority    AnnouncementPriority @default(NORMAL)
  isPublished Boolean          @default(false)
  publishedAt DateTime?
  expiresAt   DateTime?
  targetAudience Json          @default("{}")
  attachments Json             @default("[]")
  metadata    Json             @default("{}")
  createdBy   String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  tenantId    String

  creator     User                    @relation("AnnouncementCreator", fields: [createdBy], references: [id])
  tenant      Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  recipients  AnnouncementRecipient[]

  @@index([tenantId, isPublished, publishedAt])
  @@index([tenantId, priority])
  @@map("announcements")
}

model AnnouncementRecipient {
  id               String       @id @default(cuid())
  announcementId   String
  userId           String
  isRead           Boolean      @default(false)
  readAt           DateTime?
  isDismissed      Boolean      @default(false)
  dismissedAt      DateTime?
  deliveryMethod   String       // 'in_app', 'email', 'push'
  deliveredAt      DateTime?
  createdAt        DateTime     @default(now())
  tenantId         String

  announcement     Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  user             User         @relation("AnnouncementRecipients", fields: [userId], references: [id])
  tenant           Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([announcementId, userId])
  @@index([tenantId, userId, isRead])
  @@map("announcement_recipients")
}

model Forum {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String
  isPublic    Boolean  @default(true)
  isModerated Boolean  @default(true)
  settings    Json     @default("{}")
  metadata    Json     @default("{}")
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenantId    String

  creator     User         @relation("ForumCreator", fields: [createdBy], references: [id])
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  categories  ForumCategory[]
  moderators  ForumModerator[]

  @@unique([tenantId, slug])
  @@index([tenantId, isPublic])
  @@map("forums")
}

model ForumCategory {
  id          String   @id @default(cuid())
  forumId     String
  name        String
  description String?
  slug        String
  sortOrder   Int      @default(0)
  isLocked    Boolean  @default(false)
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenantId    String

  forum       Forum        @relation(fields: [forumId], references: [id], onDelete: Cascade)
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  topics      ForumTopic[]

  @@unique([forumId, slug])
  @@index([tenantId, forumId, sortOrder])
  @@map("forum_categories")
}

model ForumTopic {
  id          String      @id @default(cuid())
  categoryId  String
  title       String
  content     String
  contentType MessageContentType @default(TEXT)
  isSticky    Boolean     @default(false)
  isLocked    Boolean     @default(false)
  isPinned    Boolean     @default(false)
  views       Int         @default(0)
  tags        Json        @default("[]")
  metadata    Json        @default("{}")
  createdBy   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  tenantId    String

  category    ForumCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  creator     User          @relation("TopicCreator", fields: [createdBy], references: [id])
  tenant      Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  posts       ForumPost[]

  @@index([tenantId, categoryId, isSticky, isPinned, updatedAt])
  @@index([tenantId, createdBy])
  @@map("forum_topics")
}

model ForumPost {
  id          String      @id @default(cuid())
  topicId     String
  parentId    String?
  content     String
  contentType MessageContentType @default(TEXT)
  isEdited    Boolean     @default(false)
  editedAt    DateTime?
  isDeleted   Boolean     @default(false)
  deletedAt   DateTime?
  metadata    Json        @default("{}")
  createdBy   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  tenantId    String

  topic       ForumTopic   @relation(fields: [topicId], references: [id], onDelete: Cascade)
  parent      ForumPost?   @relation("PostReplies", fields: [parentId], references: [id])
  replies     ForumPost[]  @relation("PostReplies")
  creator     User         @relation("PostCreator", fields: [createdBy], references: [id])
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, topicId, createdAt])
  @@index([tenantId, createdBy])
  @@map("forum_posts")
}

model ForumModerator {
  id        String   @id @default(cuid())
  forumId   String
  userId    String
  role      ModeratorRole @default(MODERATOR)
  createdAt DateTime @default(now())
  tenantId  String

  forum     Forum    @relation(fields: [forumId], references: [id], onDelete: Cascade)
  user      User     @relation("ForumModerators", fields: [userId], references: [id])
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([forumId, userId])
  @@index([tenantId, userId])
  @@map("forum_moderators")
}

enum ChannelType {
  TEXT
  VOICE
  VIDEO
  ANNOUNCEMENT
  PRIVATE
  PROJECT
  GENERAL
}

enum ChannelRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
  GUEST
}

enum MessageContentType {
  TEXT
  MARKDOWN
  HTML
  IMAGE
  VIDEO
  AUDIO
  FILE
  LINK
  POLL
  EVENT
}

enum MentionType {
  USER
  CHANNEL
  ROLE
  EVERYONE
  HERE
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
  REVOKED
}

enum AnnouncementPriority {
  LOW
  NORMAL
  HIGH
  URGENT
  CRITICAL
}

enum ModeratorRole {
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

// Advanced Search Models
model SearchIndex {
  id          String   @id @default(cuid())
  entityType  String   // 'user', 'event', 'content', 'forum_post', etc.
  entityId    String
  tenantId    String
  title       String
  content     String   @db.Text
  metadata    Json     @default("{}")
  tags        Json     @default("[]")
  searchText  String   @db.Text // Preprocessed search text
  categories  Json     @default("[]")
  status      String   @default("active")
  popularity  Float    @default(0.0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, entityType])
  @@index([tenantId, searchText])
  @@index([tenantId, status])
  @@fulltext([title, content, searchText])
  @@map("search_indexes")
}

model SearchQuery {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String?
  query       String
  filters     Json     @default("{}")
  results     Int      @default(0)
  executionTime Float  @default(0.0)
  ipAddress   String?
  userAgent   String?
  sessionId   String?
  createdAt   DateTime @default(now())

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User?    @relation("SearchQueries", fields: [userId], references: [id], onDelete: SetNull)

  @@index([tenantId, userId])
  @@index([tenantId, createdAt])
  @@map("search_queries")
}

model SearchSuggestion {
  id          String   @id @default(cuid())
  tenantId    String
  suggestion  String
  category    String?
  popularity  Int      @default(0)
  isActive    Boolean  @default(true)
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, suggestion])
  @@index([tenantId, category, popularity])
  @@map("search_suggestions")
}

model SavedSearch {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  name        String
  query       String
  filters     Json     @default("{}")
  isPublic    Boolean  @default(false)
  description String?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User     @relation("SavedSearches", fields: [userId], references: [id], onDelete: Cascade)

  @@index([tenantId, userId])
  @@index([tenantId, isPublic])
  @@map("saved_searches")
}

model SearchFacet {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  type        FacetType
  entityType  String
  fieldPath   String
  displayName String
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, name])
  @@index([tenantId, entityType, isActive])
  @@map("search_facets")
}

model SearchResult {
  id            String   @id @default(cuid())
  tenantId      String
  queryId       String?
  entityType    String
  entityId      String
  title         String
  snippet       String?
  score         Float    @default(0.0)
  rank          Int
  metadata      Json     @default("{}")
  clickedAt     DateTime?
  createdAt     DateTime @default(now())

  tenant        Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  query         SearchQuery?  @relation(fields: [queryId], references: [id], onDelete: SetNull)

  @@index([tenantId, queryId])
  @@index([tenantId, entityType, score])
  @@map("search_results")
}

enum FacetType {
  TEXT
  NUMBER
  DATE
  BOOLEAN
  CATEGORY
  TAG
  RANGE
  LOCATION
}

// Mobile Push Notification Models
model PushDevice {
  id           String   @id @default(cuid())
  userId       String
  tenantId     String
  deviceToken  String   @unique
  platform     Platform
  deviceName   String?
  appVersion   String?
  osVersion    String?
  isActive     Boolean  @default(true)
  lastUsed     DateTime @default(now())
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User               @relation("UserDevices", fields: [userId], references: [id], onDelete: Cascade)
  tenant       Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  notifications PushNotification[]

  @@index([userId, tenantId])
  @@index([platform, isActive])
  @@map("push_devices")
}

model PushNotification {
  id            String   @id @default(cuid())
  tenantId      String
  title         String
  body          String
  data          Json     @default("{}")
  imageUrl      String?
  clickAction   String?
  badge         Int?
  sound         String?
  priority      NotificationPriority @default(NORMAL)
  category      String?
  tags          Json     @default("[]")
  scheduledFor  DateTime?
  expiresAt     DateTime?
  createdBy     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenant        Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator       User?                @relation("NotificationCreator", fields: [createdBy], references: [id], onDelete: SetNull)
  deliveries    NotificationDelivery[]
  template      NotificationTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  templateId    String?

  @@index([tenantId, scheduledFor])
  @@index([tenantId, priority])
  @@index([tenantId, category])
  @@map("push_notifications")
}

model NotificationDelivery {
  id              String   @id @default(cuid())
  notificationId  String
  deviceId        String
  status          DeliveryStatus @default(PENDING)
  sentAt          DateTime?
  deliveredAt     DateTime?
  failedAt        DateTime?
  clickedAt       DateTime?
  error           String?
  retryCount      Int      @default(0)
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  notification    PushNotification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  device          PushDevice       @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([notificationId])
  @@index([deviceId, status])
  @@index([status, sentAt])
  @@map("notification_deliveries")
}

model NotificationTemplate {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  description String?
  title       String
  body        String
  data        Json     @default("{}")
  imageUrl    String?
  clickAction String?
  sound       String?
  category    String?
  variables   Json     @default("[]")
  isActive    Boolean  @default(true)
  metadata    Json     @default("{}")
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant        Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator       User               @relation("TemplateCreator", fields: [createdBy], references: [id])
  notifications PushNotification[]

  @@unique([tenantId, name])
  @@index([tenantId, isActive])
  @@map("notification_templates")
}

model NotificationPreference {
  id          String   @id @default(cuid())
  userId      String
  tenantId    String
  category    String
  isEnabled   Boolean  @default(true)
  priority    NotificationPriority @default(NORMAL)
  quietHours  Json?    // { start: "22:00", end: "08:00", timezone: "UTC" }
  frequency   NotificationFrequency @default(IMMEDIATE)
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation("NotificationPreferences", fields: [userId], references: [id], onDelete: Cascade)
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId, category])
  @@index([tenantId, category])
  @@map("notification_preferences")
}

model NotificationCampaign {
  id            String   @id @default(cuid())
  tenantId      String
  name          String
  description   String?
  templateId    String
  targetAudience Json    @default("{}")
  scheduledFor  DateTime?
  status        CampaignStatus @default(DRAFT)
  totalTargets  Int      @default(0)
  sentCount     Int      @default(0)
  deliveredCount Int     @default(0)
  clickedCount  Int      @default(0)
  failedCount   Int      @default(0)
  metadata      Json     @default("{}")
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenant        Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  template      NotificationTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  creator       User                 @relation("CampaignCreator", fields: [createdBy], references: [id])

  @@index([tenantId, status])
  @@index([tenantId, scheduledFor])
  @@map("notification_campaigns")
}

model NotificationAnalytics {
  id            String   @id @default(cuid())
  tenantId      String
  date          DateTime
  category      String?
  platform      Platform?
  totalSent     Int      @default(0)
  totalDelivered Int     @default(0)
  totalClicked  Int      @default(0)
  totalFailed   Int      @default(0)
  deliveryRate  Float    @default(0)
  clickRate     Float    @default(0)
  metadata      Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, date, category, platform])
  @@index([tenantId, date])
  @@map("notification_analytics")
}

enum Platform {
  IOS
  ANDROID
  WEB
  DESKTOP
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum DeliveryStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  CLICKED
  EXPIRED
}

enum NotificationFrequency {
  IMMEDIATE
  HOURLY
  DAILY
  WEEKLY
  NEVER
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  PAUSED
  CANCELLED
  COMPLETED
}

// Data Export/Import Models
model DataExport {
  id            String       @id @default(cuid())
  tenantId      String
  name          String
  description   String?
  exportType    ExportType
  format        ExportFormat
  entityTypes   Json         @default("[]")
  filters       Json         @default("{}")
  fields        Json         @default("[]")
  status        ExportStatus @default(PENDING)
  fileUrl       String?
  fileSize      BigInt?
  recordCount   Int?
  progress      Float        @default(0)
  startedAt     DateTime?
  completedAt   DateTime?
  expiresAt     DateTime?
  error         String?
  metadata      Json         @default("{}")
  createdBy     String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  tenant        Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator       User         @relation("ExportCreator", fields: [createdBy], references: [id])

  @@index([tenantId, status])
  @@index([tenantId, createdBy])
  @@index([expiresAt])
  @@map("data_exports")
}

model DataImport {
  id            String       @id @default(cuid())
  tenantId      String
  name          String
  description   String?
  importType    ImportType
  format        ImportFormat
  entityType    String
  mapping       Json         @default("{}")
  validation    Json         @default("{}")
  options       Json         @default("{}")
  status        ImportStatus @default(PENDING)
  fileUrl       String
  fileName      String
  fileSize      BigInt
  totalRecords  Int?
  processedRecords Int       @default(0)
  successfulRecords Int      @default(0)
  failedRecords Int          @default(0)
  progress      Float        @default(0)
  startedAt     DateTime?
  completedAt   DateTime?
  error         String?
  validationReport Json?
  metadata      Json         @default("{}")
  createdBy     String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  tenant        Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator       User         @relation("ImportCreator", fields: [createdBy], references: [id])
  logs          ImportLog[]

  @@index([tenantId, status])
  @@index([tenantId, createdBy])
  @@map("data_imports")
}

model ImportLog {
  id         String     @id @default(cuid())
  importId   String
  level      LogLevel   @default(INFO)
  message    String
  rowNumber  Int?
  fieldName  String?
  data       Json?
  createdAt  DateTime   @default(now())

  import     DataImport @relation(fields: [importId], references: [id], onDelete: Cascade)

  @@index([importId, level])
  @@index([importId, createdAt])
  @@map("import_logs")
}

model DataTemplate {
  id          String       @id @default(cuid())
  tenantId    String
  name        String
  description String?
  type        TemplateType
  entityType  String
  format      ExportFormat
  fields      Json         @default("[]")
  filters     Json         @default("{}")
  mapping     Json         @default("{}")
  isPublic    Boolean      @default(false)
  isActive    Boolean      @default(true)
  metadata    Json         @default("{}")
  createdBy   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User         @relation("TemplateCreator", fields: [createdBy], references: [id])

  @@unique([tenantId, name, type])
  @@index([tenantId, entityType, isActive])
  @@map("data_templates")
}

model DataSync {
  id            String     @id @default(cuid())
  tenantId      String
  name          String
  description   String?
  sourceType    SyncSourceType
  targetType    SyncTargetType
  sourceConfig  Json       @default("{}")
  targetConfig  Json       @default("{}")
  mapping       Json       @default("{}")
  schedule      String?    // Cron expression
  isActive      Boolean    @default(true)
  lastRunAt     DateTime?
  nextRunAt     DateTime?
  status        SyncStatus @default(IDLE)
  metadata      Json       @default("{}")
  createdBy     String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  tenant        Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator       User       @relation("SyncCreator", fields: [createdBy], references: [id])
  runs          SyncRun[]

  @@index([tenantId, isActive])
  @@index([nextRunAt])
  @@map("data_syncs")
}

model SyncRun {
  id              String     @id @default(cuid())
  syncId          String
  status          SyncRunStatus @default(RUNNING)
  startedAt       DateTime   @default(now())
  completedAt     DateTime?
  recordsRead     Int        @default(0)
  recordsWritten  Int        @default(0)
  recordsSkipped  Int        @default(0)
  recordsFailed   Int        @default(0)
  error           String?
  logs            Json       @default("[]")
  metadata        Json       @default("{}")

  sync            DataSync   @relation(fields: [syncId], references: [id], onDelete: Cascade)

  @@index([syncId, startedAt])
  @@map("sync_runs")
}

model DataBackup {
  id          String       @id @default(cuid())
  tenantId    String
  name        String
  description String?
  backupType  BackupType
  status      BackupStatus @default(PENDING)
  fileUrl     String?
  fileSize    BigInt?
  entityTypes Json         @default("[]")
  compression Boolean      @default(true)
  encryption  Boolean      @default(true)
  startedAt   DateTime?
  completedAt DateTime?
  expiresAt   DateTime?
  error       String?
  metadata    Json         @default("{}")
  createdBy   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User         @relation("BackupCreator", fields: [createdBy], references: [id])

  @@index([tenantId, backupType])
  @@index([tenantId, status])
  @@index([expiresAt])
  @@map("data_backups")
}

enum ExportType {
  FULL
  INCREMENTAL
  FILTERED
  CUSTOM
}

enum ExportFormat {
  CSV
  JSON
  XLSX
  XML
  PDF
  SQL
}

enum ExportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  EXPIRED
}

enum ImportType {
  CREATE
  UPDATE
  UPSERT
  DELETE
}

enum ImportFormat {
  CSV
  JSON
  XLSX
  XML
}

enum ImportStatus {
  PENDING
  VALIDATING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
}

enum TemplateType {
  EXPORT
  IMPORT
}

enum SyncSourceType {
  DATABASE
  API
  FILE
  WEBHOOK
}

enum SyncTargetType {
  DATABASE
  API
  FILE
  EMAIL
}

enum SyncStatus {
  IDLE
  RUNNING
  ERROR
  DISABLED
}

enum SyncRunStatus {
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum BackupType {
  FULL
  INCREMENTAL
  SELECTIVE
}

enum BackupStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  EXPIRED
}

// AI/ML Features Models
model AIModel {
  id          String    @id @default(cuid())
  tenantId    String
  name        String
  description String?
  type        ModelType
  provider    AIProvider
  config      Json      @default("{}")
  version     String    @default("1.0.0")
  status      ModelStatus @default(TRAINING)
  accuracy    Float?
  isActive    Boolean   @default(true)
  trainedAt   DateTime?
  deployedAt  DateTime?
  metadata    Json      @default("{}")
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User        @relation("ModelCreator", fields: [createdBy], references: [id])
  predictions AIPrediction[]
  trainingSessions TrainingSession[]

  @@unique([tenantId, name])
  @@index([tenantId, type, status])
  @@map("ai_models")
}

model AIPrediction {
  id          String      @id @default(cuid())
  tenantId    String
  modelId     String
  entityType  String      // 'user', 'event', 'donation', etc.
  entityId    String
  inputData   Json
  outputData  Json
  confidence  Float?
  status      PredictionStatus @default(PENDING)
  executedAt  DateTime?
  error       String?
  metadata    Json        @default("{}")
  createdAt   DateTime    @default(now())

  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  model       AIModel     @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@index([tenantId, modelId, status])
  @@index([tenantId, entityType, entityId])
  @@map("ai_predictions")
}

model TrainingSession {
  id            String          @id @default(cuid())
  modelId       String
  datasetSize   Int
  trainingData  Json?
  parameters    Json            @default("{}")
  status        TrainingStatus  @default(RUNNING)
  progress      Float           @default(0)
  accuracy      Float?
  loss          Float?
  epochs        Int?
  startedAt     DateTime        @default(now())
  completedAt   DateTime?
  error         String?
  logs          Json            @default("[]")
  metadata      Json            @default("{}")

  model         AIModel         @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@index([modelId, status])
  @@map("training_sessions")
}

model AIInsight {
  id          String      @id @default(cuid())
  tenantId    String
  type        InsightType
  title       String
  description String
  data        Json
  priority    InsightPriority @default(MEDIUM)
  category    String?
  entityType  String?
  entityId    String?
  isRead      Boolean     @default(false)
  readAt      DateTime?
  readBy      String?
  validUntil  DateTime?
  metadata    Json        @default("{}")
  createdAt   DateTime    @default(now())

  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  reader      User?       @relation("InsightReader", fields: [readBy], references: [id], onDelete: SetNull)

  @@index([tenantId, type, isRead])
  @@index([tenantId, priority, createdAt])
  @@map("ai_insights")
}

model RecommendationEngine {
  id            String              @id @default(cuid())
  tenantId      String
  name          String
  description   String?
  type          RecommendationType
  algorithm     String
  config        Json                @default("{}")
  isActive      Boolean             @default(true)
  lastTrainedAt DateTime?
  accuracy      Float?
  metadata      Json                @default("{}")
  createdBy     String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator       User                @relation("EngineCreator", fields: [createdBy], references: [id])
  recommendations Recommendation[]

  @@unique([tenantId, name])
  @@index([tenantId, type, isActive])
  @@map("recommendation_engines")
}

model Recommendation {
  id          String              @id @default(cuid())
  engineId    String
  userId      String
  itemType    String              // 'event', 'content', 'user', etc.
  itemId      String
  score       Float
  reason      String?
  isClicked   Boolean             @default(false)
  clickedAt   DateTime?
  isDismissed Boolean             @default(false)
  dismissedAt DateTime?
  expiresAt   DateTime?
  metadata    Json                @default("{}")
  createdAt   DateTime            @default(now())

  engine      RecommendationEngine @relation(fields: [engineId], references: [id], onDelete: Cascade)
  user        User                @relation("UserRecommendations", fields: [userId], references: [id], onDelete: Cascade)

  @@index([engineId, userId])
  @@index([userId, itemType, isClicked])
  @@map("recommendations")
}

model ChatSession {
  id          String        @id @default(cuid())
  tenantId    String
  userId      String?
  sessionId   String        @unique
  title       String?
  context     Json          @default("{}")
  isActive    Boolean       @default(true)
  endedAt     DateTime?
  metadata    Json          @default("{}")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  tenant      Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User?         @relation("ChatSessions", fields: [userId], references: [id], onDelete: SetNull)
  messages    ChatMessage[]

  @@index([tenantId, userId])
  @@index([sessionId])
  @@map("chat_sessions")
}

model ChatMessage {
  id          String      @id @default(cuid())
  sessionId   String
  role        MessageRole
  content     String      @db.Text
  metadata    Json        @default("{}")
  tokens      Int?
  createdAt   DateTime    @default(now())

  session     ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, createdAt])
  @@map("chat_messages")
}

model ContentAnalysis {
  id            String          @id @default(cuid())
  tenantId      String
  entityType    String
  entityId      String
  analysisType  AnalysisType
  results       Json
  confidence    Float?
  status        AnalysisStatus  @default(PENDING)
  executedAt    DateTime?
  error         String?
  metadata      Json            @default("{}")
  createdAt     DateTime        @default(now())

  tenant        Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, entityType, entityId])
  @@index([tenantId, analysisType, status])
  @@map("content_analysis")
}

model AutomationRule {
  id          String          @id @default(cuid())
  tenantId    String
  name        String
  description String?
  trigger     Json            // Trigger conditions
  actions     Json            // Actions to execute
  isActive    Boolean         @default(true)
  lastRun     DateTime?
  runCount    Int             @default(0)
  successCount Int            @default(0)
  failCount   Int             @default(0)
  metadata    Json            @default("{}")
  createdBy   String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  tenant      Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User            @relation("RuleCreator", fields: [createdBy], references: [id])
  executions  RuleExecution[]

  @@index([tenantId, isActive])
  @@map("automation_rules")
}

model RuleExecution {
  id          String           @id @default(cuid())
  ruleId      String
  triggerData Json
  status      ExecutionStatus  @default(RUNNING)
  results     Json?
  startedAt   DateTime         @default(now())
  completedAt DateTime?
  error       String?
  metadata    Json             @default("{}")

  rule        AutomationRule   @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  @@index([ruleId, status])
  @@map("rule_executions")
}

enum ModelType {
  CLASSIFICATION
  REGRESSION
  CLUSTERING
  RECOMMENDATION
  NLP
  COMPUTER_VISION
  TIME_SERIES
  ANOMALY_DETECTION
}

enum AIProvider {
  OPENAI
  ANTHROPIC
  HUGGING_FACE
  GOOGLE
  AWS
  AZURE
  CUSTOM
}

enum ModelStatus {
  TRAINING
  TRAINED
  DEPLOYED
  FAILED
  DEPRECATED
}

enum PredictionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum TrainingStatus {
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum InsightType {
  TREND
  ANOMALY
  PREDICTION
  RECOMMENDATION
  ALERT
  OPPORTUNITY
}

enum InsightPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RecommendationType {
  CONTENT_BASED
  COLLABORATIVE
  HYBRID
  POPULARITY
  TRENDING
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum AnalysisType {
  SENTIMENT
  EMOTION
  TOPIC
  LANGUAGE
  TOXICITY
  READABILITY
  KEYWORDS
  ENTITIES
}

enum AnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ExecutionStatus {
  RUNNING
  COMPLETED
  FAILED
  SKIPPED
}

// Advanced Analytics Models
model AnalyticsDashboard {
  id          String    @id @default(cuid())
  tenantId    String
  name        String
  description String?
  layout      Json      @default("{}")
  config      Json      @default("{}")
  isPublic    Boolean   @default(false)
  isActive    Boolean   @default(true)
  tags        Json      @default("[]")
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  tenant      Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User           @relation("DashboardCreator", fields: [createdBy], references: [id])
  widgets     AnalyticsWidget[]
  shares      DashboardShare[]

  @@unique([tenantId, name])
  @@index([tenantId, isActive])
  @@map("analytics_dashboards")
}

model AnalyticsWidget {
  id            String    @id @default(cuid())
  dashboardId   String
  name          String
  type          WidgetType
  config        Json      @default("{}")
  position      Json      @default("{}")
  size          Json      @default("{}")
  dataSource    Json      @default("{}")
  refreshRate   Int       @default(300) // seconds
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  dashboard     AnalyticsDashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)

  @@index([dashboardId, isActive])
  @@map("analytics_widgets")
}

model DashboardShare {
  id          String      @id @default(cuid())
  dashboardId String
  sharedWith  String?     // userId
  shareToken  String?     @unique
  permissions Json        @default("{}")
  expiresAt   DateTime?
  isActive    Boolean     @default(true)
  createdBy   String
  createdAt   DateTime    @default(now())

  dashboard   AnalyticsDashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  creator     User              @relation("ShareCreator", fields: [createdBy], references: [id])
  user        User?             @relation("ShareRecipient", fields: [sharedWith], references: [id], onDelete: SetNull)

  @@index([dashboardId, isActive])
  @@index([shareToken])
  @@map("dashboard_shares")
}

model AnalyticsMetric {
  id          String      @id @default(cuid())
  tenantId    String
  name        String
  displayName String
  description String?
  category    String
  type        MetricType
  formula     String
  unit        String?
  format      String?
  tags        Json        @default("[]")
  isActive    Boolean     @default(true)
  metadata    Json        @default("{}")
  createdBy   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User        @relation("MetricCreator", fields: [createdBy], references: [id])
  values      MetricValue[]

  @@unique([tenantId, name])
  @@index([tenantId, category, isActive])
  @@map("analytics_metrics")
}

model MetricValue {
  id        String   @id @default(cuid())
  metricId  String
  value     Float
  dimensions Json    @default("{}")
  timestamp DateTime
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())

  metric    AnalyticsMetric @relation(fields: [metricId], references: [id], onDelete: Cascade)

  @@index([metricId, timestamp])
  @@index([timestamp])
  @@map("metric_values")
}

model AnalyticsQuery {
  id          String      @id @default(cuid())
  tenantId    String
  name        String
  description String?
  query       String      @db.Text
  type        QueryType   
  parameters  Json        @default("{}")
  schedule    String?     // Cron expression
  isActive    Boolean     @default(true)
  lastRun     DateTime?
  nextRun     DateTime?
  metadata    Json        @default("{}")
  createdBy   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User        @relation("QueryCreator", fields: [createdBy], references: [id])
  executions  QueryExecution[]

  @@unique([tenantId, name])
  @@index([tenantId, isActive])
  @@index([nextRun])
  @@map("analytics_queries")
}

model QueryExecution {
  id          String        @id @default(cuid())
  queryId     String
  status      ExecutionStatus @default(RUNNING)
  results     Json?
  resultCount Int?
  executionTime Float?
  startedAt   DateTime      @default(now())
  completedAt DateTime?
  error       String?
  metadata    Json          @default("{}")

  query       AnalyticsQuery @relation(fields: [queryId], references: [id], onDelete: Cascade)

  @@index([queryId, status])
  @@index([startedAt])
  @@map("query_executions")
}

model AnalyticsAlert {
  id          String       @id @default(cuid())
  tenantId    String
  name        String
  description String?
  metricId    String?
  condition   Json         // Alert condition
  threshold   Float?
  isActive    Boolean      @default(true)
  severity    AlertSeverity @default(MEDIUM)
  channels    Json         @default("[]") // Notification channels
  lastTriggered DateTime?
  triggerCount Int         @default(0)
  metadata    Json         @default("{}")
  createdBy   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  metric      AnalyticsMetric? @relation(fields: [metricId], references: [id], onDelete: SetNull)
  creator     User         @relation("AlertCreator", fields: [createdBy], references: [id])
  triggers    AlertTrigger[]

  @@unique([tenantId, name])
  @@index([tenantId, isActive])
  @@map("analytics_alerts")
}

model AlertTrigger {
  id          String       @id @default(cuid())
  alertId     String
  metricValue Float
  threshold   Float
  condition   String
  triggeredAt DateTime     @default(now())
  resolved    Boolean      @default(false)
  resolvedAt  DateTime?
  metadata    Json         @default("{}")

  alert       AnalyticsAlert @relation(fields: [alertId], references: [id], onDelete: Cascade)

  @@index([alertId, triggeredAt])
  @@index([triggeredAt, resolved])
  @@map("alert_triggers")
}

model DataCube {
  id          String    @id @default(cuid())
  tenantId    String
  name        String
  description String?
  schema      Json      // Cube schema definition
  dimensions  Json      @default("[]")
  measures    Json      @default("[]")
  filters     Json      @default("{}")
  isActive    Boolean   @default(true)
  lastBuilt   DateTime?
  metadata    Json      @default("{}")
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User      @relation("CubeCreator", fields: [createdBy], references: [id])

  @@unique([tenantId, name])
  @@index([tenantId, isActive])
  @@map("data_cubes")
}

model CohortAnalysis {
  id          String    @id @default(cuid())
  tenantId    String
  name        String
  description String?
  cohortType  CohortType
  dateColumn  String
  valueColumn String?
  groupBy     Json      @default("[]")
  filters     Json      @default("{}")
  periods     Int       @default(12)
  periodType  PeriodType @default(MONTH)
  results     Json?
  isActive    Boolean   @default(true)
  lastRun     DateTime?
  metadata    Json      @default("{}")
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User      @relation("CohortCreator", fields: [createdBy], references: [id])

  @@unique([tenantId, name])
  @@index([tenantId, cohortType])
  @@map("cohort_analyses")
}

model FunnelAnalysis {
  id          String    @id @default(cuid())
  tenantId    String
  name        String
  description String?
  steps       Json      // Funnel steps definition
  timeWindow  Int       @default(30) // days
  filters     Json      @default("{}")
  results     Json?
  conversionRate Float?
  isActive    Boolean   @default(true)
  lastRun     DateTime?
  metadata    Json      @default("{}")
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User      @relation("FunnelCreator", fields: [createdBy], references: [id])

  @@unique([tenantId, name])
  @@index([tenantId, isActive])
  @@map("funnel_analyses")
}

model RetentionAnalysis {
  id            String    @id @default(cuid())
  tenantId      String
  name          String
  description   String?
  entityType    String    // 'user', 'member', etc.
  startEvent    Json      // Initial event definition
  returnEvent   Json      // Return event definition
  timeWindows   Json      @default("[]") // Retention periods
  filters       Json      @default("{}")
  results       Json?
  retentionRate Float?
  isActive      Boolean   @default(true)
  lastRun       DateTime?
  metadata      Json      @default("{}")
  createdBy     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator       User      @relation("RetentionCreator", fields: [createdBy], references: [id])

  @@unique([tenantId, name])
  @@index([tenantId, entityType])
  @@map("retention_analyses")
}

model SegmentAnalysis {
  id          String    @id @default(cuid())
  tenantId    String
  name        String
  description String?
  entityType  String
  criteria    Json      // Segmentation criteria
  metrics     Json      @default("[]")
  results     Json?
  segments    Json?
  isActive    Boolean   @default(true)
  lastRun     DateTime?
  metadata    Json      @default("{}")
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User      @relation("SegmentCreator", fields: [createdBy], references: [id])

  @@unique([tenantId, name])
  @@index([tenantId, entityType])
  @@map("segment_analyses")
}

enum WidgetType {
  LINE_CHART
  BAR_CHART
  PIE_CHART
  DONUT_CHART
  AREA_CHART
  SCATTER_PLOT
  HEATMAP
  TABLE
  METRIC
  GAUGE
  FUNNEL
  COHORT
  MAP
  TREEMAP
  SANKEY
  WATERFALL
}

enum MetricType {
  COUNT
  SUM
  AVG
  MIN
  MAX
  DISTINCT_COUNT
  RATIO
  PERCENTAGE
  GROWTH_RATE
  CUSTOM
}

enum QueryType {
  SQL
  AGGREGATION
  TIME_SERIES
  COHORT
  FUNNEL
  RETENTION
  SEGMENT
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum CohortType {
  ACQUISITION
  BEHAVIORAL
  REVENUE
}

enum PeriodType {
  DAY
  WEEK
  MONTH
  QUARTER
  YEAR
}

// Performance Monitoring Models
model PerformanceMetric {
  id            String              @id @default(cuid())
  tenantId      String
  name          String
  type          PerformanceMetricType
  value         Float
  unit          String
  tags          Json                @default("{}")
  metadata      Json                @default("{}")
  timestamp     DateTime            @default(now())
  source        String
  environment   String              @default("production")

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  traces        PerformanceTrace[]

  @@index([tenantId, type, timestamp])
  @@index([tenantId, name, timestamp])
  @@map("performance_metrics")
}

model PerformanceTrace {
  id            String              @id @default(cuid())
  tenantId      String
  traceId       String
  spanId        String
  parentSpanId  String?
  operationName String
  startTime     DateTime
  endTime       DateTime
  duration      Float
  status        TraceStatus
  tags          Json                @default("{}")
  logs          Json                @default("[]")
  errors        Json                @default("[]")
  metricId      String?

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  metric        PerformanceMetric?  @relation(fields: [metricId], references: [id])

  @@index([tenantId, traceId])
  @@index([tenantId, operationName, startTime])
  @@map("performance_traces")
}

model PerformanceAlert {
  id            String              @id @default(cuid())
  tenantId      String
  name          String
  description   String?
  metricType    PerformanceMetricType
  condition     Json
  threshold     Float
  severity      AlertSeverity
  isActive      Boolean             @default(true)
  lastTriggered DateTime?
  config        Json                @default("{}")
  createdBy     String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator       User                @relation(fields: [createdBy], references: [id])
  triggers      PerformanceAlertTrigger[]

  @@map("performance_alerts")
}

model PerformanceAlertTrigger {
  id            String              @id @default(cuid())
  tenantId      String
  alertId       String
  metricValue   Float
  threshold     Float
  severity      AlertSeverity
  message       String
  metadata      Json                @default("{}")
  resolvedAt    DateTime?
  createdAt     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  alert         PerformanceAlert    @relation(fields: [alertId], references: [id], onDelete: Cascade)

  @@map("performance_alert_triggers")
}

model SystemHealthCheck {
  id            String              @id @default(cuid())
  tenantId      String
  service       String
  endpoint      String
  status        HealthStatus
  responseTime  Float
  statusCode    Int?
  message       String?
  metadata      Json                @default("{}")
  checkedAt     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, service, checkedAt])
  @@map("system_health_checks")
}

model PerformanceProfile {
  id            String              @id @default(cuid())
  tenantId      String
  name          String
  type          ProfileType
  data          Json
  duration      Float
  metadata      Json                @default("{}")
  createdBy     String
  createdAt     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator       User                @relation(fields: [createdBy], references: [id])

  @@map("performance_profiles")
}

model ResourceUsage {
  id            String              @id @default(cuid())
  tenantId      String
  resourceType  ResourceType
  usage         Float
  limit         Float?
  unit          String
  metadata      Json                @default("{}")
  timestamp     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, resourceType, timestamp])
  @@map("resource_usage")
}

model PerformanceBenchmark {
  id            String              @id @default(cuid())
  tenantId      String
  name          String
  type          BenchmarkType
  config        Json                @default("{}")
  results       Json                @default("{}")
  baseline      Json?
  score         Float?
  passed        Boolean             @default(false)
  createdBy     String
  createdAt     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator       User                @relation(fields: [createdBy], references: [id])

  @@map("performance_benchmarks")
}

enum PerformanceMetricType {
  response_time
  throughput
  error_rate
  cpu_usage
  memory_usage
  disk_usage
  network_io
  database_query_time
  cache_hit_rate
  queue_size
  connection_pool_usage
  gc_time
  heap_usage
  thread_count
  custom
}

enum TraceStatus {
  ok
  error
  timeout
  cancelled
}

enum HealthStatus {
  healthy
  degraded
  unhealthy
  unknown
}

enum ProfileType {
  cpu
  memory
  heap
  flame_graph
  call_stack
  allocation
}

enum ResourceType {
  cpu
  memory
  disk
  network
  database_connections
  cache_memory
  queue_size
  thread_pool
  file_descriptors
  custom
}

enum BenchmarkType {
  load_test
  stress_test
  spike_test
  volume_test
  endurance_test
  scalability_test
  performance_regression
  custom
}