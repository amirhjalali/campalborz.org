// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  subdomain String   @unique
  domain    String?  @unique
  status    TenantStatus @default(ACTIVE)
  plan      TenantPlan   @default(STARTER)
  settings  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users         User[]
  organizations Organization[]
  pages         Page[]
  templates     Template[]
  media         Media[]
  contentBlocks ContentBlock[]
  events        Event[]
  eventRSVPs    EventRSVP[]
  payments      Payment[]
  donations     Donation[]
  subscriptions Subscription[]
  notifications Notification[]
  apiKeys       ApiKey[]
  backups       Backup[]
  integrations  Integration[]
  webhookEvents WebhookEvent[]
  auditLogs     AuditLog[]
  
  // CMS relationships
  contentTypes    ContentType[]
  contents        Content[]
  categories      Category[]
  tags            Tag[]
  contentTemplates ContentTemplate[]
  
  // Event management relationships
  eventTicketTypes EventTicketType[]
  eventTickets    EventTicket[]
  eventSessions   EventSession[]
  eventSponsors   EventSponsor[]
  eventWaitlists  EventWaitlist[]
  eventReminders  EventReminder[]
  eventFeedback   EventFeedback[]
  
  @@map("tenants")
}

model User {
  id          String     @id @default(cuid())
  tenantId    String
  email       String
  name        String
  avatar      String?
  role        UserRole   @default(MEMBER)
  status      UserStatus @default(PENDING)
  permissions String[]
  passwordHash String
  emailVerified Boolean @default(false)
  emailVerificationToken String?
  emailVerificationExpiry DateTime?
  emailVerifiedAt DateTime?
  passwordResetToken String?
  passwordResetExpiry DateTime?
  passwordChangedAt DateTime?
  lastLoginAt DateTime?
  lastLoginIp String?
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret String?
  twoFactorBackupCodes Json?
  inviteAcceptedAt DateTime?
  metadata    Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  authoredPages Page[] @relation("PageAuthor")
  editedPages   Page[] @relation("PageEditor")
  uploadedMedia Media[]
  createdEvents Event[] @relation("EventCreator")
  eventRSVPs    EventRSVP[]
  payments      Payment[]
  donations     Donation[]
  subscriptions Subscription[]
  sentNotifications Notification[] @relation("NotificationSender")
  receivedNotifications Notification[] @relation("NotificationRecipient")
  createdApiKeys        ApiKey[] @relation("ApiKeyCreator")
  createdBackups        Backup[] @relation("BackupCreator")
  createdIntegrations   Integration[] @relation("IntegrationCreator")
  auditLogs             AuditLog[]
  
  // CMS relationships
  contentTypes    ContentType[] @relation("ContentTypeCreator")
  authoredContent Content[] @relation("ContentAuthor")
  editedContent   Content[] @relation("ContentEditor")
  revisions       ContentRevision[] @relation("RevisionAuthor")
  translations    ContentTranslation[] @relation("ContentTranslator")
  uploadedMedia   ContentMedia[] @relation("MediaUploader")
  comments        Comment[] @relation("CommentAuthor")
  moderatedComments Comment[] @relation("CommentModerator")
  contentTemplates ContentTemplate[] @relation("TemplateCreator")
  
  // Event management relationships
  eventTickets    EventTicket[] @relation("UserTickets")
  checkedInTickets EventTicket[] @relation("TicketCheckedInBy")
  sessionAttendees SessionAttendee[] @relation("SessionAttendee")
  eventWaitlists  EventWaitlist[] @relation("EventWaitlist")
  eventReminders  EventReminder[] @relation("EventReminders")
  eventFeedback   EventFeedback[] @relation("EventFeedback")
  
  @@unique([tenantId, email])
  @@map("users")
}

model Organization {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  type        OrgType  @default(CAMP)
  description String?
  logo        String?
  website     String?
  location    String?
  settings    Json
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  pages       Page[]
  
  @@map("organizations")
}

model Page {
  id             String      @id @default(cuid())
  tenantId       String
  organizationId String?
  title          String
  slug           String
  content        Json        // Structured content blocks
  metaTitle      String?
  metaDescription String?
  status         PageStatus  @default(DRAFT)
  publishedAt    DateTime?
  templateId     String?
  settings       Json?       // Page-specific settings
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  createdBy      String
  updatedBy      String

  // Relations
  tenant         Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  author         User         @relation("PageAuthor", fields: [createdBy], references: [id])
  editor         User         @relation("PageEditor", fields: [updatedBy], references: [id])
  template       Template?    @relation(fields: [templateId], references: [id])
  
  @@unique([tenantId, slug])
  @@map("pages")
}

model Template {
  id          String   @id @default(cuid())
  tenantId    String?  // null for global templates
  name        String
  description String?
  preview     String?  // URL to preview image
  content     Json     // Template structure
  category    String
  isPublic    Boolean  @default(false)
  price       Int?     // in cents, null for free
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant      Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  pages       Page[]
  
  @@map("templates")
}

model Media {
  id          String    @id @default(cuid())
  tenantId    String
  filename    String
  originalName String
  mimeType    String
  size        Int       // in bytes
  url         String
  thumbnailUrl String?
  alt         String?
  caption     String?
  folder      String?   // organizational folder
  tags        String[]  // searchable tags
  metadata    Json?     // EXIF data, dimensions, etc.
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  uploadedBy  String

  // Relations
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  uploader    User   @relation(fields: [uploadedBy], references: [id])
  
  @@map("media")
}

model ContentBlock {
  id          String         @id @default(cuid())
  tenantId    String
  name        String
  description String?
  type        ContentBlockType
  schema      Json           // JSON schema for the block
  component   String         // React component name
  category    String
  icon        String?
  isPublic    Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@map("content_blocks")
}

model Event {
  id           String      @id @default(cuid())
  tenantId     String
  title        String
  description  String?
  content      Json?       // Rich content for event details
  type         EventType   @default(GENERAL)
  category     String?     // Workshop, Social, Art Build, etc.
  startDate    DateTime
  endDate      DateTime?
  location     String?
  address      String?
  maxAttendees Int?
  price        Int?        // in cents, null for free
  isPublic     Boolean     @default(true)
  status       EventStatus @default(DRAFT)
  metadata     Json?       // Additional event data
  settings     Json?       // Event-specific settings
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  createdBy    String

  // Relations
  tenant       Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator      User        @relation("EventCreator", fields: [createdBy], references: [id])
  rsvps        EventRSVP[]
  payments     Payment[]
  ticketTypes  EventTicketType[]
  sessions     EventSession[]
  sponsors     EventSponsor[]
  waitlists    EventWaitlist[]
  reminders    EventReminder[]
  feedback     EventFeedback[]
  
  @@index([tenantId, startDate])
  @@index([tenantId, status])
  @@index([type, startDate])
  @@map("events")
}

model EventTicketType {
  id            String   @id @default(cuid())
  eventId       String
  tenantId      String
  name          String
  description   String?
  price         Int      // in cents
  quantity      Int      // Total tickets available
  sold          Int      @default(0)
  maxPerPerson  Int      @default(1)
  saleStartDate DateTime?
  saleEndDate   DateTime?
  isActive      Boolean  @default(true)
  metadata      Json?    // Additional ticket data
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  event         Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tenant        Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tickets       EventTicket[]

  @@index([eventId, isActive])
  @@map("event_ticket_types")
}

model EventTicket {
  id            String   @id @default(cuid())
  ticketTypeId  String
  userId        String
  tenantId      String
  ticketNumber  String   @unique // Generated ticket number
  status        TicketStatus @default(VALID)
  purchasePrice Int      // Price paid in cents
  qrCode        String?  // QR code for check-in
  checkedInAt   DateTime?
  checkedInBy   String?
  metadata      Json?    // Additional ticket data
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  ticketType    EventTicketType @relation(fields: [ticketTypeId], references: [id], onDelete: Cascade)
  user          User            @relation("UserTickets", fields: [userId], references: [id])
  tenant        Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  checkedInByUser User?         @relation("TicketCheckedInBy", fields: [checkedInBy], references: [id])

  @@index([userId, status])
  @@index([ticketTypeId, status])
  @@map("event_tickets")
}

model EventSession {
  id          String   @id @default(cuid())
  eventId     String
  tenantId    String
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  maxAttendees Int?
  speakers    Json?    // Array of speaker information
  materials   Json?    // Required materials or preparation
  level       SessionLevel @default(BEGINNER)
  tags        String[]
  isRequired  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  event       Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tenant      Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  attendees   SessionAttendee[]

  @@index([eventId, startTime])
  @@map("event_sessions")
}

model SessionAttendee {
  id        String      @id @default(cuid())
  sessionId String
  userId    String
  status    AttendeeStatus @default(REGISTERED)
  notes     String?
  rating    Int?        // 1-5 rating after session
  feedback  String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  session   EventSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      User         @relation("SessionAttendee", fields: [userId], references: [id])

  @@unique([sessionId, userId])
  @@map("session_attendees")
}

model EventSponsor {
  id          String       @id @default(cuid())
  eventId     String
  tenantId    String
  name        String
  logo        String?
  website     String?
  description String?
  level       SponsorLevel @default(BRONZE)
  amount      Int?         // Sponsorship amount in cents
  benefits    Json?        // Array of sponsor benefits
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  event       Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([eventId, level])
  @@map("event_sponsors")
}

model EventWaitlist {
  id          String   @id @default(cuid())
  eventId     String
  userId      String
  tenantId    String
  position    Int      // Position in waitlist
  notified    Boolean  @default(false)
  expiresAt   DateTime?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user        User     @relation("EventWaitlist", fields: [userId], references: [id])
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([eventId, position])
  @@map("event_waitlists")
}

model EventReminder {
  id        String    @id @default(cuid())
  eventId   String
  userId    String
  tenantId  String
  type      ReminderType
  sendAt    DateTime
  sent      Boolean   @default(false)
  sentAt    DateTime?
  method    NotificationChannel @default(EMAIL)
  metadata  Json?
  createdAt DateTime  @default(now())

  // Relations
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User      @relation("EventReminders", fields: [userId], references: [id])
  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([sendAt, sent])
  @@index([eventId, type])
  @@map("event_reminders")
}

model EventFeedback {
  id          String   @id @default(cuid())
  eventId     String
  userId      String
  tenantId    String
  rating      Int      // 1-5 overall rating
  feedback    String?
  categories  Json?    // Ratings for different aspects
  wouldRecommend Boolean?
  suggestions String?
  isAnonymous Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user        User     @relation("EventFeedback", fields: [userId], references: [id])
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([eventId, rating])
  @@map("event_feedback")
}

// Event-related Enums
enum TicketStatus {
  VALID
  USED
  CANCELLED
  REFUNDED
  TRANSFERRED
}

enum SessionLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  ALL_LEVELS
}

enum AttendeeStatus {
  REGISTERED
  CONFIRMED
  ATTENDED
  NO_SHOW
  CANCELLED
}

enum SponsorLevel {
  TITLE
  PLATINUM
  GOLD
  SILVER
  BRONZE
  SUPPORTER
}

enum ReminderType {
  EVENT_REMINDER
  RSVP_REMINDER
  FEEDBACK_REQUEST
  FOLLOW_UP
  CUSTOM
}

model EventRSVP {
  id         String     @id @default(cuid())
  tenantId   String
  eventId    String
  userId     String
  status     RSVPStatus @default(PENDING)
  response   String?    // Additional response/notes
  attendees  Int        @default(1) // Number of people this RSVP covers
  metadata   Json?      // Additional RSVP data
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  tenant     Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  event      Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([eventId, userId])
  @@map("event_rsvps")
}

model Payment {
  id              String        @id @default(cuid())
  tenantId        String
  userId          String
  amount          Int           // in cents
  currency        String        @default("USD")
  type            PaymentType
  status          PaymentStatus @default(PENDING)
  stripePaymentId String?       @unique
  stripeCustomerId String?
  metadata        Json?         // Additional payment data
  description     String?
  eventId         String?       // If payment is for event
  donationId      String?      // If payment is a donation
  subscriptionId  String?       // If payment is for subscription
  refundedAmount  Int?          // Amount refunded in cents
  failureReason   String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  tenant          Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  event           Event?        @relation(fields: [eventId], references: [id], onDelete: SetNull)
  donation        Donation?     @relation(fields: [donationId], references: [id], onDelete: SetNull)
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  
  @@map("payments")
}

model Donation {
  id              String         @id @default(cuid())
  tenantId        String
  userId          String?        // null for anonymous donations
  amount          Int            // in cents
  currency        String         @default("USD")
  type            DonationType   @default(ONE_TIME)
  status          DonationStatus @default(PENDING)
  campaign        String?        // Campaign or fund name
  message         String?        // Donor message
  isAnonymous     Boolean        @default(false)
  metadata        Json?          // Additional donation data
  taxReceiptSent  Boolean        @default(false)
  acknowledgeSent Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  tenant          Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user            User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  payment         Payment[]
  
  @@map("donations")
}

model Subscription {
  id                 String             @id @default(cuid())
  tenantId           String
  userId             String
  plan               String             // Plan identifier
  amount             Int                // in cents per billing period
  currency           String             @default("USD")
  interval           BillingInterval    @default(MONTHLY)
  status             SubscriptionStatus @default(ACTIVE)
  stripeSubscriptionId String?          @unique
  stripeCustomerId   String?
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelledAt        DateTime?
  cancelReason       String?
  metadata           Json?              // Additional subscription data
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  // Relations
  tenant             Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments           Payment[]
  
  @@map("subscriptions")
}

model Notification {
  id          String             @id @default(cuid())
  tenantId    String
  senderId    String?            // null for system notifications
  recipientId String
  type        NotificationType
  title       String
  message     String
  data        Json?              // Additional notification data
  isRead      Boolean            @default(false)
  readAt      DateTime?
  channel     NotificationChannel @default(IN_APP)
  priority    NotificationPriority @default(NORMAL)
  expiresAt   DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relations
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  sender      User?  @relation("NotificationSender", fields: [senderId], references: [id], onDelete: SetNull)
  recipient   User   @relation("NotificationRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  
  @@index([recipientId, isRead])
  @@index([tenantId, createdAt])
  @@map("notifications")
}

enum TenantStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum TenantPlan {
  STARTER
  PROFESSIONAL
  ENTERPRISE
  CUSTOM
}

enum UserRole {
  SUPER_ADMIN
  TENANT_ADMIN
  ADMIN
  MODERATOR
  MEMBER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum OrgType {
  CAMP
  FESTIVAL
  COLLECTIVE
  COMMUNITY
  OTHER
}

enum PageStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ContentBlockType {
  TEXT
  IMAGE
  VIDEO
  GALLERY
  FORM
  BUTTON
  HERO
  TESTIMONIAL
  FAQ
  PRICING
  TEAM
  CALENDAR
  MAP
  CUSTOM
}

enum EventType {
  GENERAL
  WORKSHOP
  SOCIAL
  ART_BUILD
  FUNDRAISER
  CULTURAL
  MEETING
  VOLUNTEER
  EDUCATIONAL
  ENTERTAINMENT
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  POSTPONED
  COMPLETED
}

enum RSVPStatus {
  PENDING
  CONFIRMED
  DECLINED
  WAITLIST
  CANCELLED
}

enum PaymentType {
  DONATION
  EVENT_TICKET
  SUBSCRIPTION
  MERCHANDISE
  OTHER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
  CANCELLED
}

enum DonationType {
  ONE_TIME
  RECURRING
  CAMPAIGN
}

enum DonationStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum BillingInterval {
  MONTHLY
  QUARTERLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELLED
  PAUSED
  TRIALING
  INCOMPLETE
}

enum NotificationType {
  MEMBER_APPLICATION
  MEMBER_APPROVED
  MEMBER_REJECTED
  EVENT_CREATED
  EVENT_UPDATED
  EVENT_CANCELLED
  EVENT_RSVP
  DONATION_RECEIVED
  PAYMENT_FAILED
  SYSTEM_ANNOUNCEMENT
  REMINDER
  WELCOME
  ADMIN_MESSAGE
}

enum NotificationChannel {
  IN_APP
  EMAIL
  SMS
  PUSH
}

enum BackupType {
  DATABASE
  FILES
  FULL
}

enum BackupStorageType {
  LOCAL
  S3
  AZURE
  GCP
}

enum BackupStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  EXPIRED
}

enum IntegrationCategory {
  EMAIL
  PAYMENT
  ANALYTICS
  SOCIAL
  STORAGE
  COMMUNICATION
  OTHER
}

enum AuditSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model ApiKey {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  description String?
  keyHash     String   @unique // SHA256 hash of the actual key
  permissions String[] // Array of permission strings
  rateLimit   Int      @default(1000) // Requests per hour
  isActive    Boolean  @default(true)
  lastUsedAt  DateTime?
  usageCount  Int      @default(0)
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   // User ID who created this key

  // Relations
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User   @relation("ApiKeyCreator", fields: [createdBy], references: [id])

  @@map("api_keys")
}

model Backup {
  id          String       @id @default(cuid())
  tenantId    String
  type        BackupType
  size        BigInt
  compressed  Boolean      @default(false)
  encrypted   Boolean      @default(false)
  checksum    String
  storagePath String
  storageType BackupStorageType @default(LOCAL)
  status      BackupStatus @default(PENDING)
  error       String?
  metadata    Json?
  expiresAt   DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdBy   String

  // Relations
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User   @relation("BackupCreator", fields: [createdBy], references: [id])

  @@map("backups")
}

model Integration {
  id          String             @id @default(cuid())
  tenantId    String
  name        String
  description String?
  category    IntegrationCategory
  provider    String
  enabled     Boolean            @default(true)
  settings    Json               @default("{}")
  credentials Json               // Encrypted credentials
  webhookUrl  String?
  webhookSecret String?
  rateLimits  Json?
  scopes      String[]
  version     String             @default("1.0.0")
  lastSyncAt  DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  createdBy   String

  // Relations
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator       User           @relation("IntegrationCreator", fields: [createdBy], references: [id])
  webhookEvents WebhookEvent[]

  @@map("integrations")
}

model WebhookEvent {
  id            String      @id @default(cuid())
  tenantId      String
  integrationId String
  event         String
  payload       Json
  headers       Json
  signature     String?
  verified      Boolean     @default(false)
  processed     Boolean     @default(false)
  error         String?
  retryCount    Int         @default(0)
  maxRetries    Int         @default(3)
  nextRetryAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@map("webhook_events")
}

model AuditLog {
  id         String         @id @default(cuid())
  tenantId   String?
  userId     String?
  action     String
  resource   String
  resourceId String?
  ip         String
  userAgent  String
  metadata   Json           @default("{}")
  severity   AuditSeverity
  timestamp  DateTime       @default(now())

  // Relations
  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([tenantId, timestamp])
  @@index([userId, timestamp])
  @@index([action, timestamp])
  @@index([severity, timestamp])
  @@map("audit_logs")
}

// Advanced CMS Models

model ContentType {
  id          String   @id @default(cuid())
  name        String   // e.g., "Page", "Blog Post", "Event"
  slug        String   // e.g., "page", "blog_post", "event"
  description String?
  
  // Schema definition for this content type
  schema      Json     // JSON schema defining fields and validation
  
  // Display configuration
  displayName String   // Singular name for UI
  pluralName  String   // Plural name for UI
  icon        String?  // Icon identifier
  
  // Permissions and workflow
  permissions Json     // Role-based permissions
  workflow    Json?    // Approval workflow configuration
  
  // Settings
  isEnabled   Boolean  @default(true)
  isPublic    Boolean  @default(false) // Can be viewed by non-members
  allowComments Boolean @default(false)
  
  // Relationships
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  contents    Content[]
  categories  Category[]
  templates   ContentTemplate[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  creator     User     @relation("ContentTypeCreator", fields: [createdBy], references: [id])
  
  @@unique([tenantId, slug])
  @@index([tenantId, isEnabled])
  @@map("content_types")
}

model Content {
  id            String   @id @default(cuid())
  title         String
  slug          String
  excerpt       String?
  
  // Content data stored as JSON based on ContentType schema
  data          Json
  
  // Meta information
  metaTitle     String?
  metaDescription String?
  metaKeywords  String?
  
  // Publishing
  status        ContentStatus @default(DRAFT)
  publishedAt   DateTime?
  scheduledAt   DateTime?
  
  // SEO and Social
  featuredImage String?
  socialImage   String?
  canonicalUrl  String?
  
  // Analytics and engagement
  viewCount     Int      @default(0)
  shareCount    Int      @default(0)
  likeCount     Int      @default(0)
  commentCount  Int      @default(0)
  
  // Content type relationship
  contentTypeId String
  contentType   ContentType @relation(fields: [contentTypeId], references: [id], onDelete: Cascade)
  
  // Tenant relationship
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Categories and tags
  categories    ContentCategory[]
  tags          ContentTag[]
  
  // Media attachments
  media         ContentMedia[]
  
  // Comments
  comments      Comment[]
  
  // Revisions
  revisions     ContentRevision[]
  
  // Translations
  translations  ContentTranslation[]
  
  // Author information
  authorId      String
  author        User     @relation("ContentAuthor", fields: [authorId], references: [id])
  
  // Editor information
  lastEditedBy  String?
  lastEditor    User?    @relation("ContentEditor", fields: [lastEditedBy], references: [id])
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([tenantId, contentTypeId, slug])
  @@index([tenantId, status, publishedAt])
  @@index([tenantId, contentTypeId, status])
  @@index([publishedAt])
  @@map("cms_content")
}

model ContentRevision {
  id        String   @id @default(cuid())
  
  // Revision data
  title     String
  data      Json
  excerpt   String?
  
  // Revision metadata
  version   Int
  comment   String?
  
  // Relationships
  contentId String
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  authorId  String
  author    User     @relation("RevisionAuthor", fields: [authorId], references: [id])
  
  createdAt DateTime @default(now())
  
  @@index([contentId, version])
  @@map("content_revisions")
}

model ContentTranslation {
  id          String   @id @default(cuid())
  
  language    String   // ISO language code (e.g., "en", "fa", "es")
  title       String
  excerpt     String?
  data        Json
  
  // Meta for this language
  metaTitle     String?
  metaDescription String?
  
  // Translation status
  status      TranslationStatus @default(PENDING)
  
  // Relationships
  contentId   String
  content     Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  translatorId String?
  translator   User?    @relation("ContentTranslator", fields: [translatorId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([contentId, language])
  @@index([language, status])
  @@map("content_translations")
}

model Category {
  id            String   @id @default(cuid())
  name          String
  slug          String
  description   String?
  color         String?  // Hex color code
  icon          String?
  
  // Hierarchy
  parentId      String?
  parent        Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children      Category[] @relation("CategoryHierarchy")
  
  // Display order
  sortOrder     Int      @default(0)
  
  // Content type relationship
  contentTypeId String
  contentType   ContentType @relation(fields: [contentTypeId], references: [id], onDelete: Cascade)
  
  // Tenant relationship
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Content relationships
  contents      ContentCategory[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([tenantId, contentTypeId, slug])
  @@index([tenantId, contentTypeId])
  @@map("cms_categories")
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  slug      String
  color     String?  // Hex color code
  
  // Tenant relationship
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Content relationships
  contents  ContentTag[]
  
  createdAt DateTime @default(now())
  
  @@unique([tenantId, slug])
  @@index([tenantId])
  @@map("cms_tags")
}

model ContentCategory {
  contentId   String
  content     Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@id([contentId, categoryId])
  @@map("content_categories")
}

model ContentTag {
  contentId   String
  content     Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  tagId       String
  tag         Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([contentId, tagId])
  @@map("content_tags")
}

model ContentMedia {
  id        String   @id @default(cuid())
  
  filename  String
  originalName String
  mimeType  String
  size      Int
  url       String
  
  // Image specific
  width     Int?
  height    Int?
  alt       String?
  caption   String?
  
  // Relationships
  contentId String
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  uploadedBy String
  uploader   User     @relation("MediaUploader", fields: [uploadedBy], references: [id])
  
  createdAt DateTime @default(now())
  
  @@index([contentId])
  @@map("content_media")
}

model Comment {
  id        String   @id @default(cuid())
  
  content   String
  status    CommentStatus @default(PENDING)
  
  // Hierarchy for replies
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  
  // Relationships
  contentId String
  contentItem Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  authorId  String?
  author    User?    @relation("CommentAuthor", fields: [authorId], references: [id])
  
  // For guest comments
  guestName  String?
  guestEmail String?
  
  // Moderation
  moderatedBy String?
  moderator   User?    @relation("CommentModerator", fields: [moderatedBy], references: [id])
  moderatedAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([contentId, status])
  @@index([createdAt])
  @@map("cms_comments")
}

model ContentTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  
  // Template data
  schema      Json     // Field definitions
  defaultData Json?    // Default values
  
  // Template metadata
  category    String?
  tags        String[]
  
  // Usage tracking
  useCount    Int      @default(0)
  
  // Relationships
  contentTypeId String
  contentType   ContentType @relation(fields: [contentTypeId], references: [id], onDelete: Cascade)
  
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  createdBy   String
  creator     User     @relation("TemplateCreator", fields: [createdBy], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([tenantId, contentTypeId])
  @@map("content_templates")
}

// CMS Enums
enum ContentStatus {
  DRAFT
  REVIEW
  SCHEDULED
  PUBLISHED
  ARCHIVED
  DELETED
}

enum TranslationStatus {
  PENDING
  IN_PROGRESS
  REVIEW
  COMPLETED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}