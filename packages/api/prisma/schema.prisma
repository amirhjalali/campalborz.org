// Minimal working schema for Camp Alborz platform
// This includes only core models needed to get started

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Core multi-tenant model
model Tenant {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  domain          String?  @unique
  logo            String?
  settings        Json     @default("{}")
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  users           User[]
  organizations   Organization[]
  campaigns       Campaign[]
  events          Event[]
  donations       Donation[]

  @@map("tenants")
}

model User {
  id          String     @id @default(cuid())
  tenantId    String
  email       String
  password    String
  firstName   String?
  lastName    String?
  avatar      String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  tenant      Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  createdCampaigns  Campaign[] @relation("CampaignCreator")
  createdEvents     Event[]    @relation("EventCreator")
  donations         Donation[]

  @@unique([tenantId, email])
  @@map("users")
}

model Organization {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  description String?
  type        String?
  website     String?
  logo        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  campaigns   Campaign[]
  events      Event[]

  @@map("organizations")
}

model Campaign {
  id              String   @id @default(cuid())
  tenantId        String
  organizationId  String
  title           String
  description     String
  goalAmount      Float
  currentAmount   Float    @default(0)
  startDate       DateTime
  endDate         DateTime
  imageUrl        String?
  isActive        Boolean  @default(true)
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant          Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  organization    Organization @relation(fields: [organizationId], references: [id])
  creator         User         @relation("CampaignCreator", fields: [createdBy], references: [id])
  donations       Donation[]

  @@map("campaigns")
}

model Event {
  id              String   @id @default(cuid())
  tenantId        String
  organizationId  String
  name            String
  description     String?
  location        String?
  startDate       DateTime
  endDate         DateTime
  capacity        Int?
  imageUrl        String?
  isPublic        Boolean  @default(true)
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant          Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  organization    Organization @relation(fields: [organizationId], references: [id])
  creator         User         @relation("EventCreator", fields: [createdBy], references: [id])

  @@map("events")
}

model Donation {
  id              String   @id @default(cuid())
  tenantId        String
  campaignId      String
  donorId         String
  amount          Float
  currency        String   @default("USD")
  paymentMethod   String?
  transactionId   String?
  status          DonationStatus @default(pending)
  isAnonymous     Boolean  @default(false)
  message         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  campaign        Campaign @relation(fields: [campaignId], references: [id])
  donor           User     @relation(fields: [donorId], references: [id])

  @@map("donations")
}

// Enums
enum DonationStatus {
  pending
  processing
  completed
  failed
  refunded
  cancelled
}