// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  subdomain String   @unique
  domain    String?  @unique
  status    TenantStatus @default(ACTIVE)
  plan      TenantPlan   @default(STARTER)
  settings  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users         User[]
  organizations Organization[]
  pages         Page[]
  templates     Template[]
  media         Media[]
  contentBlocks ContentBlock[]
  
  @@map("tenants")
}

model User {
  id          String     @id @default(cuid())
  tenantId    String
  email       String
  name        String
  avatar      String?
  role        UserRole   @default(MEMBER)
  status      UserStatus @default(PENDING)
  permissions String[]
  metadata    Json?
  passwordHash String?
  lastLoginAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  authoredPages Page[] @relation("PageAuthor")
  editedPages   Page[] @relation("PageEditor")
  uploadedMedia Media[]
  
  @@unique([tenantId, email])
  @@map("users")
}

model Organization {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  type        OrgType  @default(CAMP)
  description String?
  logo        String?
  website     String?
  location    String?
  settings    Json
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  pages       Page[]
  
  @@map("organizations")
}

model Page {
  id             String      @id @default(cuid())
  tenantId       String
  organizationId String?
  title          String
  slug           String
  content        Json        // Structured content blocks
  metaTitle      String?
  metaDescription String?
  status         PageStatus  @default(DRAFT)
  publishedAt    DateTime?
  templateId     String?
  settings       Json?       // Page-specific settings
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  createdBy      String
  updatedBy      String

  // Relations
  tenant         Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  author         User         @relation("PageAuthor", fields: [createdBy], references: [id])
  editor         User         @relation("PageEditor", fields: [updatedBy], references: [id])
  template       Template?    @relation(fields: [templateId], references: [id])
  
  @@unique([tenantId, slug])
  @@map("pages")
}

model Template {
  id          String   @id @default(cuid())
  tenantId    String?  // null for global templates
  name        String
  description String?
  preview     String?  // URL to preview image
  content     Json     // Template structure
  category    String
  isPublic    Boolean  @default(false)
  price       Int?     // in cents, null for free
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant      Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  pages       Page[]
  
  @@map("templates")
}

model Media {
  id          String    @id @default(cuid())
  tenantId    String
  filename    String
  originalName String
  mimeType    String
  size        Int       // in bytes
  url         String
  thumbnailUrl String?
  alt         String?
  caption     String?
  folder      String?   // organizational folder
  tags        String[]  // searchable tags
  metadata    Json?     // EXIF data, dimensions, etc.
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  uploadedBy  String

  // Relations
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  uploader    User   @relation(fields: [uploadedBy], references: [id])
  
  @@map("media")
}

model ContentBlock {
  id          String         @id @default(cuid())
  tenantId    String
  name        String
  description String?
  type        ContentBlockType
  schema      Json           // JSON schema for the block
  component   String         // React component name
  category    String
  icon        String?
  isPublic    Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@map("content_blocks")
}

enum TenantStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum TenantPlan {
  STARTER
  PROFESSIONAL
  ENTERPRISE
  CUSTOM
}

enum UserRole {
  SUPER_ADMIN
  TENANT_ADMIN
  ADMIN
  MODERATOR
  MEMBER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum OrgType {
  CAMP
  FESTIVAL
  COLLECTIVE
  COMMUNITY
  OTHER
}

enum PageStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ContentBlockType {
  TEXT
  IMAGE
  VIDEO
  GALLERY
  FORM
  BUTTON
  HERO
  TESTIMONIAL
  FAQ
  PRICING
  TEAM
  CALENDAR
  MAP
  CUSTOM
}