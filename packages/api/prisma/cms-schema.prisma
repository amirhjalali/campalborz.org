// Advanced CMS Schema Extension
// This file extends the main schema with CMS-specific models

model ContentType {
  id          String   @id @default(cuid())
  name        String   // e.g., "Page", "Blog Post", "Event"
  slug        String   // e.g., "page", "blog_post", "event"
  description String?
  
  // Schema definition for this content type
  schema      Json     // JSON schema defining fields and validation
  
  // Display configuration
  displayName String   // Singular name for UI
  pluralName  String   // Plural name for UI
  icon        String?  // Icon identifier
  
  // Permissions and workflow
  permissions Json     // Role-based permissions
  workflow    Json?    // Approval workflow configuration
  
  // Settings
  isEnabled   Boolean  @default(true)
  isPublic    Boolean  @default(false) // Can be viewed by non-members
  allowComments Boolean @default(false)
  
  // Relationships
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  contents    Content[]
  categories  Category[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  creator     User     @relation("ContentTypeCreator", fields: [createdBy], references: [id])
  
  @@unique([tenantId, slug])
  @@index([tenantId, isEnabled])
}

model Content {
  id            String   @id @default(cuid())
  title         String
  slug          String
  excerpt       String?
  
  // Content data stored as JSON based on ContentType schema
  data          Json
  
  // Meta information
  metaTitle     String?
  metaDescription String?
  metaKeywords  String?
  
  // Publishing
  status        ContentStatus @default(DRAFT)
  publishedAt   DateTime?
  scheduledAt   DateTime?
  
  // SEO and Social
  featuredImage String?
  socialImage   String?
  canonicalUrl  String?
  
  // Analytics and engagement
  viewCount     Int      @default(0)
  shareCount    Int      @default(0)
  likeCount     Int      @default(0)
  commentCount  Int      @default(0)
  
  // Content type relationship
  contentTypeId String
  contentType   ContentType @relation(fields: [contentTypeId], references: [id], onDelete: Cascade)
  
  // Tenant relationship
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Categories and tags
  categories    ContentCategory[]
  tags          ContentTag[]
  
  // Media attachments
  media         ContentMedia[]
  
  // Comments
  comments      Comment[]
  
  // Revisions
  revisions     ContentRevision[]
  
  // Translations
  translations  ContentTranslation[]
  
  // Author information
  authorId      String
  author        User     @relation("ContentAuthor", fields: [authorId], references: [id])
  
  // Editor information
  lastEditedBy  String?
  lastEditor    User?    @relation("ContentEditor", fields: [lastEditedBy], references: [id])
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([tenantId, contentTypeId, slug])
  @@index([tenantId, status, publishedAt])
  @@index([tenantId, contentTypeId, status])
  @@index([publishedAt])
}

model ContentRevision {
  id        String   @id @default(cuid())
  
  // Revision data
  title     String
  data      Json
  excerpt   String?
  
  // Revision metadata
  version   Int
  comment   String?
  
  // Relationships
  contentId String
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  authorId  String
  author    User     @relation("RevisionAuthor", fields: [authorId], references: [id])
  
  createdAt DateTime @default(now())
  
  @@index([contentId, version])
}

model ContentTranslation {
  id          String   @id @default(cuid())
  
  language    String   // ISO language code (e.g., "en", "fa", "es")
  title       String
  excerpt     String?
  data        Json
  
  // Meta for this language
  metaTitle     String?
  metaDescription String?
  
  // Translation status
  status      TranslationStatus @default(PENDING)
  
  // Relationships
  contentId   String
  content     Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  translatorId String?
  translator   User?    @relation("ContentTranslator", fields: [translatorId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([contentId, language])
  @@index([language, status])
}

model Category {
  id            String   @id @default(cuid())
  name          String
  slug          String
  description   String?
  color         String?  // Hex color code
  icon          String?
  
  // Hierarchy
  parentId      String?
  parent        Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children      Category[] @relation("CategoryHierarchy")
  
  // Display order
  sortOrder     Int      @default(0)
  
  // Content type relationship
  contentTypeId String
  contentType   ContentType @relation(fields: [contentTypeId], references: [id], onDelete: Cascade)
  
  // Tenant relationship
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Content relationships
  contents      ContentCategory[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([tenantId, contentTypeId, slug])
  @@index([tenantId, contentTypeId])
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  slug      String
  color     String?  // Hex color code
  
  // Tenant relationship
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Content relationships
  contents  ContentTag[]
  
  createdAt DateTime @default(now())
  
  @@unique([tenantId, slug])
  @@index([tenantId])
}

model ContentCategory {
  contentId   String
  content     Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@id([contentId, categoryId])
}

model ContentTag {
  contentId   String
  content     Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  tagId       String
  tag         Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([contentId, tagId])
}

model ContentMedia {
  id        String   @id @default(cuid())
  
  filename  String
  originalName String
  mimeType  String
  size      Int
  url       String
  
  // Image specific
  width     Int?
  height    Int?
  alt       String?
  caption   String?
  
  // Relationships
  contentId String
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  uploadedBy String
  uploader   User     @relation("MediaUploader", fields: [uploadedBy], references: [id])
  
  createdAt DateTime @default(now())
  
  @@index([contentId])
}

model Comment {
  id        String   @id @default(cuid())
  
  content   String
  status    CommentStatus @default(PENDING)
  
  // Hierarchy for replies
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  
  // Relationships
  contentId String
  contentItem Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  authorId  String?
  author    User?    @relation("CommentAuthor", fields: [authorId], references: [id])
  
  // For guest comments
  guestName  String?
  guestEmail String?
  
  // Moderation
  moderatedBy String?
  moderator   User?    @relation("CommentModerator", fields: [moderatedBy], references: [id])
  moderatedAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([contentId, status])
  @@index([createdAt])
}

model ContentTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  
  // Template data
  schema      Json     // Field definitions
  defaultData Json?    // Default values
  
  // Template metadata
  category    String?
  tags        String[]
  
  // Usage tracking
  useCount    Int      @default(0)
  
  // Relationships
  contentTypeId String
  contentType   ContentType @relation(fields: [contentTypeId], references: [id], onDelete: Cascade)
  
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  createdBy   String
  creator     User     @relation("TemplateCreator", fields: [createdBy], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([tenantId, contentTypeId])
}

// Enums
enum ContentStatus {
  DRAFT
  REVIEW
  SCHEDULED
  PUBLISHED
  ARCHIVED
  DELETED
}

enum TranslationStatus {
  PENDING
  IN_PROGRESS
  REVIEW
  COMPLETED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}

// Add these to the User model in main schema:
// contentTypes    ContentType[] @relation("ContentTypeCreator")
// authoredContent Content[] @relation("ContentAuthor")
// editedContent   Content[] @relation("ContentEditor")
// revisions       ContentRevision[] @relation("RevisionAuthor")
// translations    ContentTranslation[] @relation("ContentTranslator")
// uploadedMedia   ContentMedia[] @relation("MediaUploader")
// comments        Comment[] @relation("CommentAuthor")
// moderatedComments Comment[] @relation("CommentModerator")
// templates       ContentTemplate[] @relation("TemplateCreator")

// Add these to the Tenant model in main schema:
// contentTypes    ContentType[]
// contents        Content[]
// categories      Category[]
// tags            Tag[]
// templates       ContentTemplate[]