// This file contains the schema additions for steps 46-55
// These need to be appended to the main schema.prisma file

// Step 46: Asset Management Models
model Asset {
  id            String              @id @default(cuid())
  tenantId      String
  name          String
  type          AssetType
  category      String
  serialNumber  String?             
  purchaseDate  DateTime?
  purchasePrice Float?
  currentValue  Float?
  location      String?
  assignedTo    String?
  status        AssetStatus
  metadata      Json                @default("{}")
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  assignee      User?               @relation("AssetAssignee", fields: [assignedTo], references: [id])
  maintenance   AssetMaintenance[]

  @@index([tenantId, type])
  @@index([tenantId, status])
  @@map("assets")
}

model AssetMaintenance {
  id            String              @id @default(cuid())
  tenantId      String
  assetId       String
  type          MaintenanceType
  scheduledDate DateTime
  completedDate DateTime?
  cost          Float?
  notes         String?
  performedBy   String?
  createdAt     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  asset         Asset               @relation(fields: [assetId], references: [id], onDelete: Cascade)
  technician    User?               @relation("MaintenanceTechnician", fields: [performedBy], references: [id])

  @@map("asset_maintenance")
}

// Step 47: Compliance Management Models
model ComplianceFramework {
  id            String              @id @default(cuid())
  tenantId      String
  name          String
  version       String
  requirements  Json                @default("[]")
  isActive      Boolean             @default(true)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  assessments   ComplianceAssessment[]

  @@map("compliance_frameworks")
}

model ComplianceAssessment {
  id            String              @id @default(cuid())
  tenantId      String
  frameworkId   String
  status        ComplianceStatus
  score         Float
  findings      Json                @default("[]")
  evidence      Json                @default("[]")
  assessedBy    String
  assessedAt    DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  framework     ComplianceFramework @relation(fields: [frameworkId], references: [id])
  assessor      User                @relation("ComplianceAssessor", fields: [assessedBy], references: [id])

  @@map("compliance_assessments")
}

// Step 48: Resource Planning Models
model Resource {
  id            String              @id @default(cuid())
  tenantId      String
  name          String
  type          ResourcePlanType
  capacity      Float
  availability  Json                @default("{}")
  cost          Float?
  metadata      Json                @default("{}")
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  allocations   ResourceAllocation[]

  @@map("resources")
}

model ResourceAllocation {
  id            String              @id @default(cuid())
  tenantId      String
  resourceId    String
  projectId     String?
  quantity      Float
  startDate     DateTime
  endDate       DateTime?
  status        AllocationStatus
  createdBy     String
  createdAt     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  resource      Resource            @relation(fields: [resourceId], references: [id])
  creator       User                @relation("AllocationCreator", fields: [createdBy], references: [id])

  @@map("resource_allocations")
}

// Step 49: Knowledge Base Models
model KnowledgeArticle {
  id            String              @id @default(cuid())
  tenantId      String
  title         String
  content       String
  category      String
  tags          Json                @default("[]")
  views         Int                 @default(0)
  isPublished   Boolean             @default(false)
  authorId      String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  author        User                @relation("ArticleAuthor", fields: [authorId], references: [id])
  feedback      ArticleFeedback[]

  @@map("knowledge_articles")
}

model ArticleFeedback {
  id            String              @id @default(cuid())
  tenantId      String
  articleId     String
  userId        String
  rating        Int
  comment       String?
  createdAt     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  article       KnowledgeArticle    @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user          User                @relation("FeedbackUser", fields: [userId], references: [id])

  @@map("article_feedback")
}

// Step 50: Customer Support Models
model SupportTicket {
  id            String              @id @default(cuid())
  tenantId      String
  subject       String
  description   String
  priority      TicketPriority
  status        TicketStatus
  category      String
  assignedTo    String?
  customerId    String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  resolvedAt    DateTime?

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  assignee      User?               @relation("TicketAssignee", fields: [assignedTo], references: [id])
  customer      User                @relation("TicketCustomer", fields: [customerId], references: [id])
  messages      TicketMessage[]

  @@map("support_tickets")
}

model TicketMessage {
  id            String              @id @default(cuid())
  tenantId      String
  ticketId      String
  senderId      String
  message       String
  attachments   Json                @default("[]")
  createdAt     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  ticket        SupportTicket       @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  sender        User                @relation("MessageSender", fields: [senderId], references: [id])

  @@map("ticket_messages")
}

// Step 51: Social Media Models
model SocialAccount {
  id            String              @id @default(cuid())
  tenantId      String
  platform      SocialPlatform
  accountId     String
  accessToken   String
  refreshToken  String?
  metadata      Json                @default("{}")
  isActive      Boolean             @default(true)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  posts         SocialPost[]

  @@map("social_accounts")
}

model SocialPost {
  id            String              @id @default(cuid())
  tenantId      String
  accountId     String
  content       String
  mediaUrls     Json                @default("[]")
  scheduledAt   DateTime?
  publishedAt   DateTime?
  metrics       Json                @default("{}")
  status        PostStatus
  createdBy     String
  createdAt     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  account       SocialAccount       @relation(fields: [accountId], references: [id])
  creator       User                @relation("PostCreator", fields: [createdBy], references: [id])

  @@map("social_posts")
}

// Step 52: Mobile App Backend Models
model MobileDevice {
  id            String              @id @default(cuid())
  tenantId      String
  userId        String
  deviceId      String              @unique
  platform      MobilePlatform
  model         String?
  osVersion     String?
  appVersion    String
  pushToken     String?
  isActive      Boolean             @default(true)
  lastSeen      DateTime            @default(now())
  createdAt     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user          User                @relation("UserDevices", fields: [userId], references: [id])
  sessions      MobileSession[]

  @@map("mobile_devices")
}

model MobileSession {
  id            String              @id @default(cuid())
  tenantId      String
  deviceId      String
  sessionToken  String              @unique
  startedAt     DateTime            @default(now())
  endedAt       DateTime?
  ipAddress     String?
  location      Json?

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  device        MobileDevice        @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@map("mobile_sessions")
}

// Step 53: IoT Integration Models
model IoTDevice {
  id            String              @id @default(cuid())
  tenantId      String
  deviceId      String              @unique
  name          String
  type          IoTDeviceType
  status        IoTDeviceStatus
  firmware      String?
  location      Json?
  config        Json                @default("{}")
  lastHeartbeat DateTime?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  telemetry     IoTTelemetry[]

  @@map("iot_devices")
}

model IoTTelemetry {
  id            String              @id @default(cuid())
  tenantId      String
  deviceId      String
  metric        String
  value         Float
  unit          String?
  timestamp     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  device        IoTDevice           @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([tenantId, deviceId, timestamp])
  @@map("iot_telemetry")
}

// Step 54: Blockchain Models
model BlockchainTransaction {
  id            String              @id @default(cuid())
  tenantId      String
  transactionHash String            @unique
  fromAddress   String
  toAddress     String
  amount        Float
  gasUsed       Float?
  blockNumber   Int?
  status        TransactionStatus
  metadata      Json                @default("{}")
  createdAt     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("blockchain_transactions")
}

model SmartContract {
  id            String              @id @default(cuid())
  tenantId      String
  address       String              @unique
  name          String
  abi           Json
  bytecode      String?
  network       String
  deployedBy    String
  deployedAt    DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  deployer      User                @relation("ContractDeployer", fields: [deployedBy], references: [id])

  @@map("smart_contracts")
}

// Step 55: Edge Computing Models
model EdgeNode {
  id            String              @id @default(cuid())
  tenantId      String
  nodeId        String              @unique
  name          String
  location      Json
  capacity      Json                @default("{}")
  status        EdgeNodeStatus
  lastSync      DateTime?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workloads     EdgeWorkload[]

  @@map("edge_nodes")
}

model EdgeWorkload {
  id            String              @id @default(cuid())
  tenantId      String
  nodeId        String
  name          String
  type          WorkloadType
  config        Json                @default("{}")
  status        WorkloadStatus
  startedAt     DateTime            @default(now())
  completedAt   DateTime?

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  node          EdgeNode            @relation(fields: [nodeId], references: [id])

  @@map("edge_workloads")
}

// Enums for new models
enum AssetType {
  hardware
  software
  license
  equipment
  vehicle
  property
  other
}

enum AssetStatus {
  available
  assigned
  maintenance
  retired
  lost
}

enum MaintenanceType {
  preventive
  corrective
  predictive
  emergency
}

enum ComplianceStatus {
  compliant
  non_compliant
  partial
  pending
}

enum ResourcePlanType {
  human
  equipment
  material
  facility
  budget
}

enum AllocationStatus {
  planned
  active
  completed
  cancelled
}

enum TicketPriority {
  low
  medium
  high
  urgent
}

enum TicketStatus {
  open
  in_progress
  waiting_on_customer
  resolved
  closed
}

enum SocialPlatform {
  facebook
  twitter
  instagram
  linkedin
  youtube
  tiktok
}

enum PostStatus {
  draft
  scheduled
  published
  failed
}

enum MobilePlatform {
  ios
  android
  web
}

enum IoTDeviceType {
  sensor
  actuator
  gateway
  edge_device
}

enum IoTDeviceStatus {
  online
  offline
  error
  maintenance
}

enum TransactionStatus {
  pending
  confirmed
  failed
}

enum EdgeNodeStatus {
  online
  offline
  syncing
  error
}

enum WorkloadType {
  compute
  storage
  analytics
  ml_inference
}

enum WorkloadStatus {
  queued
  running
  completed
  failed
}