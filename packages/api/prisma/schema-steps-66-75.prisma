// Schema for Steps 66-75 - Enterprise & Scale Features

// Step 66: Multi-Cloud Support Models
model CloudProvider {
  id            String              @id @default(cuid())
  tenantId      String
  name          String
  type          CloudProviderType
  region        String
  credentials   Json                // Encrypted
  config        Json                @default("{}")
  status        CloudStatus
  isDefault     Boolean             @default(false)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  deployments   CloudDeployment[]
  resources     CloudResource[]

  @@map("cloud_providers")
}

model CloudDeployment {
  id            String              @id @default(cuid())
  tenantId      String
  providerId    String
  name          String
  type          DeploymentType
  config        Json
  status        DeploymentStatus
  resources     Json                @default("[]")
  cost          Float?
  deployedBy    String
  deployedAt    DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  provider      CloudProvider       @relation(fields: [providerId], references: [id])
  deployer      User                @relation("CloudDeployer", fields: [deployedBy], references: [id])

  @@map("cloud_deployments")
}

model CloudResource {
  id            String              @id @default(cuid())
  tenantId      String
  providerId    String
  resourceId    String              @unique
  type          String
  name          String
  status        ResourceStatus
  metadata      Json                @default("{}")
  cost          Float?
  createdAt     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  provider      CloudProvider       @relation(fields: [providerId], references: [id])

  @@map("cloud_resources")
}

// Step 67: Disaster Recovery System Models
model DisasterRecoveryPlan {
  id            String              @id @default(cuid())
  tenantId      String
  name          String
  rpo           Int                 // Recovery Point Objective (minutes)
  rto           Int                 // Recovery Time Objective (minutes)
  strategy      RecoveryStrategy
  resources     Json                @default("[]")
  procedures    Json                @default("[]")
  isActive      Boolean             @default(true)
  createdBy     String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator       User                @relation("DRPlanCreator", fields: [createdBy], references: [id])
  backups       DisasterRecoveryBackup[]
  drills        DisasterRecoveryDrill[]

  @@map("disaster_recovery_plans")
}

model DisasterRecoveryBackup {
  id            String              @id @default(cuid())
  tenantId      String
  planId        String
  type          BackupType
  location      String
  size          BigInt
  status        BackupStatus
  metadata      Json                @default("{}")
  createdAt     DateTime            @default(now())
  expiresAt     DateTime?

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  plan          DisasterRecoveryPlan @relation(fields: [planId], references: [id])

  @@map("disaster_recovery_backups")
}

model DisasterRecoveryDrill {
  id            String              @id @default(cuid())
  tenantId      String
  planId        String
  type          DrillType
  status        DrillStatus
  results       Json                @default("{}")
  startedBy     String
  startedAt     DateTime            @default(now())
  completedAt   DateTime?

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  plan          DisasterRecoveryPlan @relation(fields: [planId], references: [id])
  initiator     User                @relation("DrillInitiator", fields: [startedBy], references: [id])

  @@map("disaster_recovery_drills")
}

// Step 68: Load Balancing & CDN Models
model LoadBalancer {
  id            String              @id @default(cuid())
  tenantId      String
  name          String
  type          LoadBalancerType
  algorithm     LoadBalancerAlgorithm
  healthCheck   Json                @default("{}")
  targets       Json                @default("[]")
  status        LoadBalancerStatus
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  rules         LoadBalancerRule[]
  metrics       LoadBalancerMetric[]

  @@map("load_balancers")
}

model LoadBalancerRule {
  id            String              @id @default(cuid())
  tenantId      String
  balancerId    String
  priority      Int
  condition     Json
  action        Json
  isActive      Boolean             @default(true)
  createdAt     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  balancer      LoadBalancer        @relation(fields: [balancerId], references: [id])

  @@map("load_balancer_rules")
}

model LoadBalancerMetric {
  id            String              @id @default(cuid())
  tenantId      String
  balancerId    String
  requests      BigInt
  bytesIn       BigInt
  bytesOut      BigInt
  errors        Int
  latencyP50    Float
  latencyP95    Float
  latencyP99    Float
  timestamp     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  balancer      LoadBalancer        @relation(fields: [balancerId], references: [id])

  @@index([tenantId, balancerId, timestamp])
  @@map("load_balancer_metrics")
}

model CDNDistribution {
  id            String              @id @default(cuid())
  tenantId      String
  domain        String              @unique
  origin        String
  status        CDNStatus
  config        Json                @default("{}")
  locations     Json                @default("[]")
  cacheSettings Json                @default("{}")
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  metrics       CDNMetric[]

  @@map("cdn_distributions")
}

model CDNMetric {
  id            String              @id @default(cuid())
  tenantId      String
  distributionId String
  requests      BigInt
  hits          BigInt
  misses        BigInt
  bandwidth     BigInt
  errors        Int
  timestamp     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  distribution  CDNDistribution     @relation(fields: [distributionId], references: [id])

  @@index([tenantId, distributionId, timestamp])
  @@map("cdn_metrics")
}

// Step 69: API Gateway Models
model APIGateway {
  id            String              @id @default(cuid())
  tenantId      String
  name          String
  version       String
  basePath      String
  status        GatewayStatus
  config        Json                @default("{}")
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  routes        APIRoute[]
  policies      APIPolicy[]
  keys          APIKey[]

  @@map("api_gateways")
}

model APIRoute {
  id            String              @id @default(cuid())
  tenantId      String
  gatewayId     String
  path          String
  method        HttpMethod
  backend       String
  timeout       Int                 @default(30000)
  rateLimit     Json?
  auth          Json?
  isActive      Boolean             @default(true)
  createdAt     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  gateway       APIGateway          @relation(fields: [gatewayId], references: [id])

  @@unique([gatewayId, path, method])
  @@map("api_routes")
}

model APIPolicy {
  id            String              @id @default(cuid())
  tenantId      String
  gatewayId     String
  name          String
  type          PolicyType
  rules         Json
  priority      Int
  isActive      Boolean             @default(true)
  createdAt     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  gateway       APIGateway          @relation(fields: [gatewayId], references: [id])

  @@map("api_policies")
}

model APIKey {
  id            String              @id @default(cuid())
  tenantId      String
  gatewayId     String
  key           String              @unique
  name          String
  permissions   Json                @default("[]")
  rateLimit     Json?
  expiresAt     DateTime?
  isActive      Boolean             @default(true)
  createdAt     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  gateway       APIGateway          @relation(fields: [gatewayId], references: [id])
  usage         APIUsage[]

  @@map("api_keys")
}

model APIUsage {
  id            String              @id @default(cuid())
  tenantId      String
  keyId         String
  endpoint      String
  method        String
  statusCode    Int
  responseTime  Int
  timestamp     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  apiKey        APIKey              @relation(fields: [keyId], references: [id])

  @@index([tenantId, keyId, timestamp])
  @@map("api_usage")
}

// Step 70: Service Mesh Models
model ServiceMesh {
  id            String              @id @default(cuid())
  tenantId      String
  name          String
  type          MeshType
  config        Json                @default("{}")
  status        MeshStatus
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  services      MeshService[]
  policies      MeshPolicy[]

  @@map("service_meshes")
}

model MeshService {
  id            String              @id @default(cuid())
  tenantId      String
  meshId        String
  name          String
  namespace     String
  version       String
  endpoints     Json                @default("[]")
  health        ServiceHealth
  metadata      Json                @default("{}")
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  mesh          ServiceMesh         @relation(fields: [meshId], references: [id])
  traffic       MeshTraffic[]

  @@map("mesh_services")
}

model MeshPolicy {
  id            String              @id @default(cuid())
  tenantId      String
  meshId        String
  name          String
  type          MeshPolicyType
  rules         Json
  targets       Json                @default("[]")
  isActive      Boolean             @default(true)
  createdAt     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  mesh          ServiceMesh         @relation(fields: [meshId], references: [id])

  @@map("mesh_policies")
}

model MeshTraffic {
  id            String              @id @default(cuid())
  tenantId      String
  serviceId     String
  source        String
  destination   String
  requests      BigInt
  errors        Int
  latencyP50    Float
  latencyP95    Float
  latencyP99    Float
  timestamp     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  service       MeshService         @relation(fields: [serviceId], references: [id])

  @@index([tenantId, serviceId, timestamp])
  @@map("mesh_traffic")
}

// Step 71: Observability Platform Models
model ObservabilityDashboard {
  id            String              @id @default(cuid())
  tenantId      String
  name          String
  description   String?
  panels        Json                @default("[]")
  variables     Json                @default("[]")
  refresh       Int                 @default(60)
  createdBy     String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator       User                @relation("ObsDashboardCreator", fields: [createdBy], references: [id])
  alerts        ObservabilityAlert[]

  @@map("observability_dashboards")
}

model ObservabilityMetric {
  id            String              @id @default(cuid())
  tenantId      String
  name          String
  type          MetricType
  value         Float
  tags          Json                @default("{}")
  timestamp     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, name, timestamp])
  @@map("observability_metrics")
}

model ObservabilityTrace {
  id            String              @id @default(cuid())
  tenantId      String
  traceId       String              @unique
  serviceName   String
  operationName String
  duration      Int
  tags          Json                @default("{}")
  logs          Json                @default("[]")
  status        TraceStatus
  timestamp     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  spans         ObservabilitySpan[]

  @@index([tenantId, serviceName, timestamp])
  @@map("observability_traces")
}

model ObservabilitySpan {
  id            String              @id @default(cuid())
  tenantId      String
  traceId       String
  spanId        String              @unique
  parentSpanId  String?
  operationName String
  serviceName   String
  duration      Int
  tags          Json                @default("{}")
  logs          Json                @default("[]")
  timestamp     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  trace         ObservabilityTrace  @relation(fields: [traceId], references: [id])

  @@map("observability_spans")
}

model ObservabilityLog {
  id            String              @id @default(cuid())
  tenantId      String
  level         LogLevel
  message       String
  service       String
  metadata      Json                @default("{}")
  timestamp     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, service, timestamp])
  @@index([tenantId, level, timestamp])
  @@map("observability_logs")
}

model ObservabilityAlert {
  id            String              @id @default(cuid())
  tenantId      String
  dashboardId   String?
  name          String
  condition     Json
  threshold     Float
  severity      AlertSeverity
  status        AlertStatus
  notifications Json                @default("[]")
  lastTriggered DateTime?
  createdAt     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  dashboard     ObservabilityDashboard? @relation(fields: [dashboardId], references: [id])

  @@map("observability_alerts")
}

// Step 72: Cost Management Models
model CostCenter {
  id            String              @id @default(cuid())
  tenantId      String
  name          String
  code          String              @unique
  budget        Float
  currency      String              @default("USD")
  ownerId       String
  metadata      Json                @default("{}")
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  owner         User                @relation("CostCenterOwner", fields: [ownerId], references: [id])
  allocations   CostAllocation[]
  budgets       CostBudget[]

  @@map("cost_centers")
}

model CostAllocation {
  id            String              @id @default(cuid())
  tenantId      String
  costCenterId  String
  resourceType  String
  resourceId    String
  amount        Float
  currency      String              @default("USD")
  period        DateTime
  tags          Json                @default("{}")
  createdAt     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  costCenter    CostCenter          @relation(fields: [costCenterId], references: [id])

  @@index([tenantId, costCenterId, period])
  @@map("cost_allocations")
}

model CostBudget {
  id            String              @id @default(cuid())
  tenantId      String
  costCenterId  String
  amount        Float
  period        BudgetPeriod
  alertThreshold Float              @default(80)
  status        BudgetStatus
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  costCenter    CostCenter          @relation(fields: [costCenterId], references: [id])
  alerts        CostAlert[]

  @@map("cost_budgets")
}

model CostAlert {
  id            String              @id @default(cuid())
  tenantId      String
  budgetId      String
  type          CostAlertType
  threshold     Float
  currentSpend  Float
  message       String
  status        AlertStatus
  createdAt     DateTime            @default(now())
  acknowledgedAt DateTime?

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  budget        CostBudget          @relation(fields: [budgetId], references: [id])

  @@map("cost_alerts")
}

// Step 73: License Management Models
model SoftwareLicense {
  id            String              @id @default(cuid())
  tenantId      String
  vendor        String
  product       String
  version       String?
  licenseKey    String?             // Encrypted
  type          LicenseType
  seats         Int?
  expiresAt     DateTime?
  cost          Float?
  status        LicenseStatus
  metadata      Json                @default("{}")
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  assignments   LicenseAssignment[]
  usage         LicenseUsage[]

  @@map("software_licenses")
}

model LicenseAssignment {
  id            String              @id @default(cuid())
  tenantId      String
  licenseId     String
  userId        String?
  deviceId      String?
  assignedAt    DateTime            @default(now())
  revokedAt     DateTime?
  status        AssignmentStatus

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  license       SoftwareLicense     @relation(fields: [licenseId], references: [id])
  user          User?               @relation("LicenseUser", fields: [userId], references: [id])

  @@map("license_assignments")
}

model LicenseUsage {
  id            String              @id @default(cuid())
  tenantId      String
  licenseId     String
  usedSeats     Int
  totalSeats    Int
  utilizationRate Float
  timestamp     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  license       SoftwareLicense     @relation(fields: [licenseId], references: [id])

  @@index([tenantId, licenseId, timestamp])
  @@map("license_usage")
}

// Step 74: Audit & Compliance Reporting Models
model AuditReport {
  id            String              @id @default(cuid())
  tenantId      String
  type          AuditReportType
  period        Json                // {start: Date, end: Date}
  scope         Json                @default("[]")
  findings      Json                @default("[]")
  recommendations Json             @default("[]")
  status        ReportStatus
  generatedBy   String
  generatedAt   DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  generator     User                @relation("ReportGenerator", fields: [generatedBy], references: [id])
  evidence      AuditEvidence[]

  @@map("audit_reports")
}

model AuditEvidence {
  id            String              @id @default(cuid())
  tenantId      String
  reportId      String
  type          EvidenceType
  description   String
  data          Json
  source        String
  collectedAt   DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  report        AuditReport         @relation(fields: [reportId], references: [id])

  @@map("audit_evidence")
}

model ComplianceReport {
  id            String              @id @default(cuid())
  tenantId      String
  framework     String
  version       String
  assessmentDate DateTime
  score         Float
  status        ComplianceReportStatus
  gaps          Json                @default("[]")
  controls      Json                @default("[]")
  certifications Json              @default("[]")
  nextReview    DateTime?
  createdAt     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("compliance_reports")
}

// Step 75: Enterprise SSO Models
model SSOProvider {
  id            String              @id @default(cuid())
  tenantId      String
  name          String
  type          SSOProviderType
  config        Json                // Encrypted config
  metadata      Json                @default("{}")
  isActive      Boolean             @default(true)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  connections   SSOConnection[]
  sessions      SSOSession[]

  @@map("sso_providers")
}

model SSOConnection {
  id            String              @id @default(cuid())
  tenantId      String
  providerId    String
  domain        String
  config        Json                // Connection-specific config
  status        ConnectionStatus
  lastSync      DateTime?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  provider      SSOProvider         @relation(fields: [providerId], references: [id])
  mappings      SSOUserMapping[]

  @@unique([tenantId, domain])
  @@map("sso_connections")
}

model SSOUserMapping {
  id            String              @id @default(cuid())
  tenantId      String
  connectionId  String
  externalId    String              // ID in external system
  userId        String
  attributes    Json                @default("{}")
  lastLogin     DateTime?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  connection    SSOConnection       @relation(fields: [connectionId], references: [id])
  user          User                @relation("SSOUser", fields: [userId], references: [id])

  @@unique([connectionId, externalId])
  @@map("sso_user_mappings")
}

model SSOSession {
  id            String              @id @default(cuid())
  tenantId      String
  providerId    String
  userId        String
  sessionToken  String              @unique
  idToken       String?             // Encrypted
  refreshToken  String?             // Encrypted
  expiresAt     DateTime
  createdAt     DateTime            @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  provider      SSOProvider         @relation(fields: [providerId], references: [id])
  user          User                @relation("SSOSession", fields: [userId], references: [id])

  @@map("sso_sessions")
}

// Enums for steps 66-75
enum CloudProviderType {
  aws
  azure
  gcp
  alibaba
  oracle
  ibm
  digitalocean
  linode
}

enum CloudStatus {
  active
  inactive
  configuring
  error
}

enum DeploymentType {
  compute
  storage
  database
  network
  container
  serverless
}

enum DeploymentStatus {
  pending
  deploying
  active
  failed
  terminated
}

enum ResourceStatus {
  provisioning
  running
  stopped
  terminated
  error
}

enum RecoveryStrategy {
  backup_restore
  pilot_light
  warm_standby
  multi_site
}

enum BackupType {
  full
  incremental
  differential
  snapshot
}

enum BackupStatus {
  pending
  running
  completed
  failed
  expired
}

enum DrillType {
  tabletop
  partial
  full
  surprise
}

enum DrillStatus {
  planned
  running
  completed
  failed
  cancelled
}

enum LoadBalancerType {
  application
  network
  classic
  global
}

enum LoadBalancerAlgorithm {
  round_robin
  least_connections
  ip_hash
  weighted
  random
}

enum LoadBalancerStatus {
  provisioning
  active
  updating
  deleting
  error
}

enum CDNStatus {
  deploying
  active
  updating
  disabled
  error
}

enum GatewayStatus {
  active
  inactive
  deploying
  updating
  error
}

enum HttpMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  HEAD
  OPTIONS
}

enum PolicyType {
  rate_limit
  auth
  cors
  transform
  cache
  circuit_breaker
}

enum MeshType {
  istio
  linkerd
  consul
  kuma
  traefik
}

enum MeshStatus {
  initializing
  active
  updating
  degraded
  error
}

enum ServiceHealth {
  healthy
  degraded
  unhealthy
  unknown
}

enum MeshPolicyType {
  traffic
  security
  observability
  resilience
}

enum MetricType {
  counter
  gauge
  histogram
  summary
}

enum TraceStatus {
  ok
  error
  timeout
}

enum LogLevel {
  trace
  debug
  info
  warn
  error
  fatal
}

enum AlertSeverity {
  low
  medium
  high
  critical
}

enum AlertStatus {
  active
  acknowledged
  resolved
  suppressed
}

enum BudgetPeriod {
  monthly
  quarterly
  yearly
  custom
}

enum BudgetStatus {
  active
  exceeded
  warning
  inactive
}

enum CostAlertType {
  threshold
  forecast
  anomaly
  trend
}

enum LicenseType {
  perpetual
  subscription
  concurrent
  named_user
  site
  trial
}

enum LicenseStatus {
  active
  expired
  suspended
  revoked
}

enum AssignmentStatus {
  active
  revoked
  pending
  expired
}

enum AuditReportType {
  security
  compliance
  financial
  operational
  access
}

enum ReportStatus {
  draft
  reviewing
  final
  archived
}

enum EvidenceType {
  log
  screenshot
  document
  config
  metric
}

enum ComplianceReportStatus {
  compliant
  partial
  non_compliant
  pending_review
}

enum SSOProviderType {
  saml
  oidc
  oauth2
  ldap
  active_directory
}

enum ConnectionStatus {
  connected
  disconnected
  error
  syncing
}